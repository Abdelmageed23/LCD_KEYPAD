
KeyPad_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e12  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00002e12  00002e86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002400  00000000  00000000  00002eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b31  00000000  00000000  000052b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005de1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005f41  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000060d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00008115  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00009216  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000a198  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a5da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ae68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <main>
      7a:	0c 94 07 17 	jmp	0x2e0e	; 0x2e0e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d0 16 	jmp	0x2da0	; 0x2da0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e7       	ldi	r26, 0x70	; 112
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d0 16 	jmp	0x2da0	; 0x2da0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e7       	ldi	r24, 0x70	; 112
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 d8 16 	jmp	0x2db0	; 0x2db0 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e7       	ldi	r22, 0x70	; 112
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <LCD_Init>:
#include <util/delay.h>

#define 	F_CPU   8000000UL

void LCD_Init()
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	2e 97       	sbiw	r28, 0x0e	; 14
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	a0 e2       	ldi	r26, 0x20	; 32
     ca8:	b2 e4       	ldi	r27, 0x42	; 66
     caa:	8b 87       	std	Y+11, r24	; 0x0b
     cac:	9c 87       	std	Y+12, r25	; 0x0c
     cae:	ad 87       	std	Y+13, r26	; 0x0d
     cb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cb2:	6b 85       	ldd	r22, Y+11	; 0x0b
     cb4:	7c 85       	ldd	r23, Y+12	; 0x0c
     cb6:	8d 85       	ldd	r24, Y+13	; 0x0d
     cb8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	4a ef       	ldi	r20, 0xFA	; 250
     cc0:	54 e4       	ldi	r21, 0x44	; 68
     cc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	8f 83       	std	Y+7, r24	; 0x07
     ccc:	98 87       	std	Y+8, r25	; 0x08
     cce:	a9 87       	std	Y+9, r26	; 0x09
     cd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cd2:	6f 81       	ldd	r22, Y+7	; 0x07
     cd4:	78 85       	ldd	r23, Y+8	; 0x08
     cd6:	89 85       	ldd	r24, Y+9	; 0x09
     cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	40 e8       	ldi	r20, 0x80	; 128
     ce0:	5f e3       	ldi	r21, 0x3F	; 63
     ce2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     ce6:	88 23       	and	r24, r24
     ce8:	2c f4       	brge	.+10     	; 0xcf4 <LCD_Init+0x66>
		__ticks = 1;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	9e 83       	std	Y+6, r25	; 0x06
     cf0:	8d 83       	std	Y+5, r24	; 0x05
     cf2:	3f c0       	rjmp	.+126    	; 0xd72 <LCD_Init+0xe4>
	else if (__tmp > 65535)
     cf4:	6f 81       	ldd	r22, Y+7	; 0x07
     cf6:	78 85       	ldd	r23, Y+8	; 0x08
     cf8:	89 85       	ldd	r24, Y+9	; 0x09
     cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	3f ef       	ldi	r19, 0xFF	; 255
     d00:	4f e7       	ldi	r20, 0x7F	; 127
     d02:	57 e4       	ldi	r21, 0x47	; 71
     d04:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     d08:	18 16       	cp	r1, r24
     d0a:	4c f5       	brge	.+82     	; 0xd5e <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d0c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d0e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d10:	8d 85       	ldd	r24, Y+13	; 0x0d
     d12:	9e 85       	ldd	r25, Y+14	; 0x0e
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	40 e2       	ldi	r20, 0x20	; 32
     d1a:	51 e4       	ldi	r21, 0x41	; 65
     d1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	bc 01       	movw	r22, r24
     d26:	cd 01       	movw	r24, r26
     d28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	9e 83       	std	Y+6, r25	; 0x06
     d32:	8d 83       	std	Y+5, r24	; 0x05
     d34:	0f c0       	rjmp	.+30     	; 0xd54 <LCD_Init+0xc6>
     d36:	88 ec       	ldi	r24, 0xC8	; 200
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	9c 83       	std	Y+4, r25	; 0x04
     d3c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	9c 81       	ldd	r25, Y+4	; 0x04
     d42:	01 97       	sbiw	r24, 0x01	; 1
     d44:	f1 f7       	brne	.-4      	; 0xd42 <LCD_Init+0xb4>
     d46:	9c 83       	std	Y+4, r25	; 0x04
     d48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4a:	8d 81       	ldd	r24, Y+5	; 0x05
     d4c:	9e 81       	ldd	r25, Y+6	; 0x06
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	9e 83       	std	Y+6, r25	; 0x06
     d52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d54:	8d 81       	ldd	r24, Y+5	; 0x05
     d56:	9e 81       	ldd	r25, Y+6	; 0x06
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	69 f7       	brne	.-38     	; 0xd36 <LCD_Init+0xa8>
     d5c:	14 c0       	rjmp	.+40     	; 0xd86 <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d5e:	6f 81       	ldd	r22, Y+7	; 0x07
     d60:	78 85       	ldd	r23, Y+8	; 0x08
     d62:	89 85       	ldd	r24, Y+9	; 0x09
     d64:	9a 85       	ldd	r25, Y+10	; 0x0a
     d66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d6a:	dc 01       	movw	r26, r24
     d6c:	cb 01       	movw	r24, r22
     d6e:	9e 83       	std	Y+6, r25	; 0x06
     d70:	8d 83       	std	Y+5, r24	; 0x05
     d72:	8d 81       	ldd	r24, Y+5	; 0x05
     d74:	9e 81       	ldd	r25, Y+6	; 0x06
     d76:	9a 83       	std	Y+2, r25	; 0x02
     d78:	89 83       	std	Y+1, r24	; 0x01
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	9a 81       	ldd	r25, Y+2	; 0x02
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <LCD_Init+0xf0>
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	DIO_SetPortDirection(LCD_PORT,OUTPUT);  // LCD PORT OUTPUT
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	61 e0       	ldi	r22, 0x01	; 1
     d8a:	0e 94 c7 12 	call	0x258e	; 0x258e <DIO_SetPortDirection>
	DIO_SetPortValue(LCD_PORT,0x00);
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	0e 94 75 14 	call	0x28ea	; 0x28ea <DIO_SetPortValue>
	LCD_CommandInit();
     d96:	0e 94 08 07 	call	0xe10	; 0xe10 <LCD_CommandInit>
	LCD_SendCommand(0x02); // Initialize 4 bit mode
     d9a:	82 e0       	ldi	r24, 0x02	; 2
     d9c:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SendCommand>
	LCD_SendCommand(0x28); // Initialize 2 lines  5x8 dots and 4 bit mode
     da0:	88 e2       	ldi	r24, 0x28	; 40
     da2:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SendCommand>
	LCD_SendCommand(LCD_ENTRY_MODE); // Entry mode
     da6:	86 e0       	ldi	r24, 0x06	; 6
     da8:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SendCommand>
	LCD_SendCommand(LCD_BEGIN_AT_FIRST_RAW);
     dac:	80 e8       	ldi	r24, 0x80	; 128
     dae:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SendCommand>
	LCD_SendCommand(LCD_DISP_ON_CURSOR_BLINK); // Display On , Cursor blinking
     db2:	8f e0       	ldi	r24, 0x0F	; 15
     db4:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SendCommand>
	LCD_Clear_screen();
     db8:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_Clear_screen>

}
     dbc:	2e 96       	adiw	r28, 0x0e	; 14
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	08 95       	ret

00000dce <LCD_GotoXY>:

void LCD_GotoXY (uint8_t line ,uint8_t postion)
{
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	00 d0       	rcall	.+0      	; 0xdd4 <LCD_GotoXY+0x6>
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	89 83       	std	Y+1, r24	; 0x01
     dda:	6a 83       	std	Y+2, r22	; 0x02
	if(line==0)
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	88 23       	and	r24, r24
     de0:	41 f4       	brne	.+16     	; 0xdf2 <LCD_GotoXY+0x24>
	{
		if(postion < 16 && postion >=0)
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	80 31       	cpi	r24, 0x10	; 16
     de6:	78 f4       	brcc	.+30     	; 0xe06 <LCD_GotoXY+0x38>
			LCD_SendCommand(0x80+postion);
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	80 58       	subi	r24, 0x80	; 128
     dec:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SendCommand>
     df0:	0a c0       	rjmp	.+20     	; 0xe06 <LCD_GotoXY+0x38>
	}
	else if (line == 1)
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	39 f4       	brne	.+14     	; 0xe06 <LCD_GotoXY+0x38>
	{
		if(postion < 16 && postion >=0)
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	80 31       	cpi	r24, 0x10	; 16
     dfc:	20 f4       	brcc	.+8      	; 0xe06 <LCD_GotoXY+0x38>
			LCD_SendCommand(0xc0+postion);
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	80 54       	subi	r24, 0x40	; 64
     e02:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SendCommand>
	}
}
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	08 95       	ret

00000e10 <LCD_CommandInit>:


void LCD_CommandInit()
{
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	e4 97       	sbiw	r28, 0x34	; 52
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	a0 e2       	ldi	r26, 0x20	; 32
     e2a:	b2 e4       	ldi	r27, 0x42	; 66
     e2c:	89 ab       	std	Y+49, r24	; 0x31
     e2e:	9a ab       	std	Y+50, r25	; 0x32
     e30:	ab ab       	std	Y+51, r26	; 0x33
     e32:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e34:	69 a9       	ldd	r22, Y+49	; 0x31
     e36:	7a a9       	ldd	r23, Y+50	; 0x32
     e38:	8b a9       	ldd	r24, Y+51	; 0x33
     e3a:	9c a9       	ldd	r25, Y+52	; 0x34
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	4a ef       	ldi	r20, 0xFA	; 250
     e42:	54 e4       	ldi	r21, 0x44	; 68
     e44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	8d a7       	std	Y+45, r24	; 0x2d
     e4e:	9e a7       	std	Y+46, r25	; 0x2e
     e50:	af a7       	std	Y+47, r26	; 0x2f
     e52:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
     e54:	6d a5       	ldd	r22, Y+45	; 0x2d
     e56:	7e a5       	ldd	r23, Y+46	; 0x2e
     e58:	8f a5       	ldd	r24, Y+47	; 0x2f
     e5a:	98 a9       	ldd	r25, Y+48	; 0x30
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	40 e8       	ldi	r20, 0x80	; 128
     e62:	5f e3       	ldi	r21, 0x3F	; 63
     e64:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e68:	88 23       	and	r24, r24
     e6a:	2c f4       	brge	.+10     	; 0xe76 <LCD_CommandInit+0x66>
		__ticks = 1;
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	9c a7       	std	Y+44, r25	; 0x2c
     e72:	8b a7       	std	Y+43, r24	; 0x2b
     e74:	3f c0       	rjmp	.+126    	; 0xef4 <LCD_CommandInit+0xe4>
	else if (__tmp > 65535)
     e76:	6d a5       	ldd	r22, Y+45	; 0x2d
     e78:	7e a5       	ldd	r23, Y+46	; 0x2e
     e7a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e7c:	98 a9       	ldd	r25, Y+48	; 0x30
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	3f ef       	ldi	r19, 0xFF	; 255
     e82:	4f e7       	ldi	r20, 0x7F	; 127
     e84:	57 e4       	ldi	r21, 0x47	; 71
     e86:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e8a:	18 16       	cp	r1, r24
     e8c:	4c f5       	brge	.+82     	; 0xee0 <LCD_CommandInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e8e:	69 a9       	ldd	r22, Y+49	; 0x31
     e90:	7a a9       	ldd	r23, Y+50	; 0x32
     e92:	8b a9       	ldd	r24, Y+51	; 0x33
     e94:	9c a9       	ldd	r25, Y+52	; 0x34
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e2       	ldi	r20, 0x20	; 32
     e9c:	51 e4       	ldi	r21, 0x41	; 65
     e9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	bc 01       	movw	r22, r24
     ea8:	cd 01       	movw	r24, r26
     eaa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	9c a7       	std	Y+44, r25	; 0x2c
     eb4:	8b a7       	std	Y+43, r24	; 0x2b
     eb6:	0f c0       	rjmp	.+30     	; 0xed6 <LCD_CommandInit+0xc6>
     eb8:	88 ec       	ldi	r24, 0xC8	; 200
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	9a a7       	std	Y+42, r25	; 0x2a
     ebe:	89 a7       	std	Y+41, r24	; 0x29
     ec0:	89 a5       	ldd	r24, Y+41	; 0x29
     ec2:	9a a5       	ldd	r25, Y+42	; 0x2a
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <LCD_CommandInit+0xb4>
     ec8:	9a a7       	std	Y+42, r25	; 0x2a
     eca:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ecc:	8b a5       	ldd	r24, Y+43	; 0x2b
     ece:	9c a5       	ldd	r25, Y+44	; 0x2c
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	9c a7       	std	Y+44, r25	; 0x2c
     ed4:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed6:	8b a5       	ldd	r24, Y+43	; 0x2b
     ed8:	9c a5       	ldd	r25, Y+44	; 0x2c
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	69 f7       	brne	.-38     	; 0xeb8 <LCD_CommandInit+0xa8>
     ede:	14 c0       	rjmp	.+40     	; 0xf08 <LCD_CommandInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee0:	6d a5       	ldd	r22, Y+45	; 0x2d
     ee2:	7e a5       	ldd	r23, Y+46	; 0x2e
     ee4:	8f a5       	ldd	r24, Y+47	; 0x2f
     ee6:	98 a9       	ldd	r25, Y+48	; 0x30
     ee8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	9c a7       	std	Y+44, r25	; 0x2c
     ef2:	8b a7       	std	Y+43, r24	; 0x2b
     ef4:	8b a5       	ldd	r24, Y+43	; 0x2b
     ef6:	9c a5       	ldd	r25, Y+44	; 0x2c
     ef8:	98 a7       	std	Y+40, r25	; 0x28
     efa:	8f a3       	std	Y+39, r24	; 0x27
     efc:	8f a1       	ldd	r24, Y+39	; 0x27
     efe:	98 a5       	ldd	r25, Y+40	; 0x28
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <LCD_CommandInit+0xf0>
     f04:	98 a7       	std	Y+40, r25	; 0x28
     f06:	8f a3       	std	Y+39, r24	; 0x27
	_delay_ms(40);
	DIO_SetPortValue(LCD_PORT,(LCD_PORT & 0b10001100));
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	0e 94 75 14 	call	0x28ea	; 0x28ea <DIO_SetPortValue>
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	a0 ea       	ldi	r26, 0xA0	; 160
     f16:	b0 e4       	ldi	r27, 0x40	; 64
     f18:	8b a3       	std	Y+35, r24	; 0x23
     f1a:	9c a3       	std	Y+36, r25	; 0x24
     f1c:	ad a3       	std	Y+37, r26	; 0x25
     f1e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f20:	6b a1       	ldd	r22, Y+35	; 0x23
     f22:	7c a1       	ldd	r23, Y+36	; 0x24
     f24:	8d a1       	ldd	r24, Y+37	; 0x25
     f26:	9e a1       	ldd	r25, Y+38	; 0x26
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	4a ef       	ldi	r20, 0xFA	; 250
     f2e:	54 e4       	ldi	r21, 0x44	; 68
     f30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	8f 8f       	std	Y+31, r24	; 0x1f
     f3a:	98 a3       	std	Y+32, r25	; 0x20
     f3c:	a9 a3       	std	Y+33, r26	; 0x21
     f3e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     f40:	6f 8d       	ldd	r22, Y+31	; 0x1f
     f42:	78 a1       	ldd	r23, Y+32	; 0x20
     f44:	89 a1       	ldd	r24, Y+33	; 0x21
     f46:	9a a1       	ldd	r25, Y+34	; 0x22
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	40 e8       	ldi	r20, 0x80	; 128
     f4e:	5f e3       	ldi	r21, 0x3F	; 63
     f50:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f54:	88 23       	and	r24, r24
     f56:	2c f4       	brge	.+10     	; 0xf62 <LCD_CommandInit+0x152>
		__ticks = 1;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	9e 8f       	std	Y+30, r25	; 0x1e
     f5e:	8d 8f       	std	Y+29, r24	; 0x1d
     f60:	3f c0       	rjmp	.+126    	; 0xfe0 <LCD_CommandInit+0x1d0>
	else if (__tmp > 65535)
     f62:	6f 8d       	ldd	r22, Y+31	; 0x1f
     f64:	78 a1       	ldd	r23, Y+32	; 0x20
     f66:	89 a1       	ldd	r24, Y+33	; 0x21
     f68:	9a a1       	ldd	r25, Y+34	; 0x22
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	3f ef       	ldi	r19, 0xFF	; 255
     f6e:	4f e7       	ldi	r20, 0x7F	; 127
     f70:	57 e4       	ldi	r21, 0x47	; 71
     f72:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f76:	18 16       	cp	r1, r24
     f78:	4c f5       	brge	.+82     	; 0xfcc <LCD_CommandInit+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f7a:	6b a1       	ldd	r22, Y+35	; 0x23
     f7c:	7c a1       	ldd	r23, Y+36	; 0x24
     f7e:	8d a1       	ldd	r24, Y+37	; 0x25
     f80:	9e a1       	ldd	r25, Y+38	; 0x26
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	40 e2       	ldi	r20, 0x20	; 32
     f88:	51 e4       	ldi	r21, 0x41	; 65
     f8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	bc 01       	movw	r22, r24
     f94:	cd 01       	movw	r24, r26
     f96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	9e 8f       	std	Y+30, r25	; 0x1e
     fa0:	8d 8f       	std	Y+29, r24	; 0x1d
     fa2:	0f c0       	rjmp	.+30     	; 0xfc2 <LCD_CommandInit+0x1b2>
     fa4:	88 ec       	ldi	r24, 0xC8	; 200
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	9c 8f       	std	Y+28, r25	; 0x1c
     faa:	8b 8f       	std	Y+27, r24	; 0x1b
     fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	f1 f7       	brne	.-4      	; 0xfb0 <LCD_CommandInit+0x1a0>
     fb4:	9c 8f       	std	Y+28, r25	; 0x1c
     fb6:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fba:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	9e 8f       	std	Y+30, r25	; 0x1e
     fc0:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fc4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	69 f7       	brne	.-38     	; 0xfa4 <LCD_CommandInit+0x194>
     fca:	14 c0       	rjmp	.+40     	; 0xff4 <LCD_CommandInit+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fcc:	6f 8d       	ldd	r22, Y+31	; 0x1f
     fce:	78 a1       	ldd	r23, Y+32	; 0x20
     fd0:	89 a1       	ldd	r24, Y+33	; 0x21
     fd2:	9a a1       	ldd	r25, Y+34	; 0x22
     fd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	9e 8f       	std	Y+30, r25	; 0x1e
     fde:	8d 8f       	std	Y+29, r24	; 0x1d
     fe0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fe2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fe4:	9a 8f       	std	Y+26, r25	; 0x1a
     fe6:	89 8f       	std	Y+25, r24	; 0x19
     fe8:	89 8d       	ldd	r24, Y+25	; 0x19
     fea:	9a 8d       	ldd	r25, Y+26	; 0x1a
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	f1 f7       	brne	.-4      	; 0xfec <LCD_CommandInit+0x1dc>
     ff0:	9a 8f       	std	Y+26, r25	; 0x1a
     ff2:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	DIO_SetPortValue(LCD_PORT,(LCD_PORT & 0b10001100));
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	0e 94 75 14 	call	0x28ea	; 0x28ea <DIO_SetPortValue>
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	a0 ef       	ldi	r26, 0xF0	; 240
    1002:	b2 e4       	ldi	r27, 0x42	; 66
    1004:	8d 8b       	std	Y+21, r24	; 0x15
    1006:	9e 8b       	std	Y+22, r25	; 0x16
    1008:	af 8b       	std	Y+23, r26	; 0x17
    100a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    100c:	6d 89       	ldd	r22, Y+21	; 0x15
    100e:	7e 89       	ldd	r23, Y+22	; 0x16
    1010:	8f 89       	ldd	r24, Y+23	; 0x17
    1012:	98 8d       	ldd	r25, Y+24	; 0x18
    1014:	2b ea       	ldi	r18, 0xAB	; 171
    1016:	3a ea       	ldi	r19, 0xAA	; 170
    1018:	4a e2       	ldi	r20, 0x2A	; 42
    101a:	50 e4       	ldi	r21, 0x40	; 64
    101c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	89 8b       	std	Y+17, r24	; 0x11
    1026:	9a 8b       	std	Y+18, r25	; 0x12
    1028:	ab 8b       	std	Y+19, r26	; 0x13
    102a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    102c:	69 89       	ldd	r22, Y+17	; 0x11
    102e:	7a 89       	ldd	r23, Y+18	; 0x12
    1030:	8b 89       	ldd	r24, Y+19	; 0x13
    1032:	9c 89       	ldd	r25, Y+20	; 0x14
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	40 e8       	ldi	r20, 0x80	; 128
    103a:	5f e3       	ldi	r21, 0x3F	; 63
    103c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1040:	88 23       	and	r24, r24
    1042:	1c f4       	brge	.+6      	; 0x104a <LCD_CommandInit+0x23a>
		__ticks = 1;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	88 8b       	std	Y+16, r24	; 0x10
    1048:	91 c0       	rjmp	.+290    	; 0x116c <LCD_CommandInit+0x35c>
	else if (__tmp > 255)
    104a:	69 89       	ldd	r22, Y+17	; 0x11
    104c:	7a 89       	ldd	r23, Y+18	; 0x12
    104e:	8b 89       	ldd	r24, Y+19	; 0x13
    1050:	9c 89       	ldd	r25, Y+20	; 0x14
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	4f e7       	ldi	r20, 0x7F	; 127
    1058:	53 e4       	ldi	r21, 0x43	; 67
    105a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    105e:	18 16       	cp	r1, r24
    1060:	0c f0       	brlt	.+2      	; 0x1064 <LCD_CommandInit+0x254>
    1062:	7b c0       	rjmp	.+246    	; 0x115a <LCD_CommandInit+0x34a>
	{
		_delay_ms(__us / 1000.0);
    1064:	6d 89       	ldd	r22, Y+21	; 0x15
    1066:	7e 89       	ldd	r23, Y+22	; 0x16
    1068:	8f 89       	ldd	r24, Y+23	; 0x17
    106a:	98 8d       	ldd	r25, Y+24	; 0x18
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	4a e7       	ldi	r20, 0x7A	; 122
    1072:	54 e4       	ldi	r21, 0x44	; 68
    1074:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	8c 87       	std	Y+12, r24	; 0x0c
    107e:	9d 87       	std	Y+13, r25	; 0x0d
    1080:	ae 87       	std	Y+14, r26	; 0x0e
    1082:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1084:	6c 85       	ldd	r22, Y+12	; 0x0c
    1086:	7d 85       	ldd	r23, Y+13	; 0x0d
    1088:	8e 85       	ldd	r24, Y+14	; 0x0e
    108a:	9f 85       	ldd	r25, Y+15	; 0x0f
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	4a ef       	ldi	r20, 0xFA	; 250
    1092:	54 e4       	ldi	r21, 0x44	; 68
    1094:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	88 87       	std	Y+8, r24	; 0x08
    109e:	99 87       	std	Y+9, r25	; 0x09
    10a0:	aa 87       	std	Y+10, r26	; 0x0a
    10a2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    10a4:	68 85       	ldd	r22, Y+8	; 0x08
    10a6:	79 85       	ldd	r23, Y+9	; 0x09
    10a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    10aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 e8       	ldi	r20, 0x80	; 128
    10b2:	5f e3       	ldi	r21, 0x3F	; 63
    10b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10b8:	88 23       	and	r24, r24
    10ba:	2c f4       	brge	.+10     	; 0x10c6 <LCD_CommandInit+0x2b6>
		__ticks = 1;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	9f 83       	std	Y+7, r25	; 0x07
    10c2:	8e 83       	std	Y+6, r24	; 0x06
    10c4:	3f c0       	rjmp	.+126    	; 0x1144 <LCD_CommandInit+0x334>
	else if (__tmp > 65535)
    10c6:	68 85       	ldd	r22, Y+8	; 0x08
    10c8:	79 85       	ldd	r23, Y+9	; 0x09
    10ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    10cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	3f ef       	ldi	r19, 0xFF	; 255
    10d2:	4f e7       	ldi	r20, 0x7F	; 127
    10d4:	57 e4       	ldi	r21, 0x47	; 71
    10d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    10da:	18 16       	cp	r1, r24
    10dc:	4c f5       	brge	.+82     	; 0x1130 <LCD_CommandInit+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10de:	6c 85       	ldd	r22, Y+12	; 0x0c
    10e0:	7d 85       	ldd	r23, Y+13	; 0x0d
    10e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    10e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e2       	ldi	r20, 0x20	; 32
    10ec:	51 e4       	ldi	r21, 0x41	; 65
    10ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	bc 01       	movw	r22, r24
    10f8:	cd 01       	movw	r24, r26
    10fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	9f 83       	std	Y+7, r25	; 0x07
    1104:	8e 83       	std	Y+6, r24	; 0x06
    1106:	0f c0       	rjmp	.+30     	; 0x1126 <LCD_CommandInit+0x316>
    1108:	88 ec       	ldi	r24, 0xC8	; 200
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	9d 83       	std	Y+5, r25	; 0x05
    110e:	8c 83       	std	Y+4, r24	; 0x04
    1110:	8c 81       	ldd	r24, Y+4	; 0x04
    1112:	9d 81       	ldd	r25, Y+5	; 0x05
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	f1 f7       	brne	.-4      	; 0x1114 <LCD_CommandInit+0x304>
    1118:	9d 83       	std	Y+5, r25	; 0x05
    111a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111c:	8e 81       	ldd	r24, Y+6	; 0x06
    111e:	9f 81       	ldd	r25, Y+7	; 0x07
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	9f 83       	std	Y+7, r25	; 0x07
    1124:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1126:	8e 81       	ldd	r24, Y+6	; 0x06
    1128:	9f 81       	ldd	r25, Y+7	; 0x07
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	69 f7       	brne	.-38     	; 0x1108 <LCD_CommandInit+0x2f8>
    112e:	24 c0       	rjmp	.+72     	; 0x1178 <LCD_CommandInit+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1130:	68 85       	ldd	r22, Y+8	; 0x08
    1132:	79 85       	ldd	r23, Y+9	; 0x09
    1134:	8a 85       	ldd	r24, Y+10	; 0x0a
    1136:	9b 85       	ldd	r25, Y+11	; 0x0b
    1138:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	9f 83       	std	Y+7, r25	; 0x07
    1142:	8e 83       	std	Y+6, r24	; 0x06
    1144:	8e 81       	ldd	r24, Y+6	; 0x06
    1146:	9f 81       	ldd	r25, Y+7	; 0x07
    1148:	9b 83       	std	Y+3, r25	; 0x03
    114a:	8a 83       	std	Y+2, r24	; 0x02
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	9b 81       	ldd	r25, Y+3	; 0x03
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	f1 f7       	brne	.-4      	; 0x1150 <LCD_CommandInit+0x340>
    1154:	9b 83       	std	Y+3, r25	; 0x03
    1156:	8a 83       	std	Y+2, r24	; 0x02
    1158:	0f c0       	rjmp	.+30     	; 0x1178 <LCD_CommandInit+0x368>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    115a:	69 89       	ldd	r22, Y+17	; 0x11
    115c:	7a 89       	ldd	r23, Y+18	; 0x12
    115e:	8b 89       	ldd	r24, Y+19	; 0x13
    1160:	9c 89       	ldd	r25, Y+20	; 0x14
    1162:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	88 8b       	std	Y+16, r24	; 0x10
    116c:	88 89       	ldd	r24, Y+16	; 0x10
    116e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	8a 95       	dec	r24
    1174:	f1 f7       	brne	.-4      	; 0x1172 <LCD_CommandInit+0x362>
    1176:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(120);
	DIO_SetPortValue(LCD_PORT,(LCD_PORT & 0b10001100));
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	0e 94 75 14 	call	0x28ea	; 0x28ea <DIO_SetPortValue>
	DIO_SetPortValue(LCD_PORT,(LCD_PORT & 0b10000100));
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	0e 94 75 14 	call	0x28ea	; 0x28ea <DIO_SetPortValue>

}
    1188:	e4 96       	adiw	r28, 0x34	; 52
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <LCD_SendCommand>:
void LCD_SendCommand(uint8_t Command)
{
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	c7 54       	subi	r28, 0x47	; 71
    11a8:	d0 40       	sbci	r29, 0x00	; 0
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	fe 01       	movw	r30, r28
    11b6:	e9 5b       	subi	r30, 0xB9	; 185
    11b8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ba:	80 83       	st	Z, r24
    11bc:	fe 01       	movw	r30, r28
    11be:	ed 5b       	subi	r30, 0xBD	; 189
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	a0 e2       	ldi	r26, 0x20	; 32
    11c8:	b1 e4       	ldi	r27, 0x41	; 65
    11ca:	80 83       	st	Z, r24
    11cc:	91 83       	std	Z+1, r25	; 0x01
    11ce:	a2 83       	std	Z+2, r26	; 0x02
    11d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d2:	8e 01       	movw	r16, r28
    11d4:	01 5c       	subi	r16, 0xC1	; 193
    11d6:	1f 4f       	sbci	r17, 0xFF	; 255
    11d8:	fe 01       	movw	r30, r28
    11da:	ed 5b       	subi	r30, 0xBD	; 189
    11dc:	ff 4f       	sbci	r31, 0xFF	; 255
    11de:	60 81       	ld	r22, Z
    11e0:	71 81       	ldd	r23, Z+1	; 0x01
    11e2:	82 81       	ldd	r24, Z+2	; 0x02
    11e4:	93 81       	ldd	r25, Z+3	; 0x03
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	4a ef       	ldi	r20, 0xFA	; 250
    11ec:	54 e4       	ldi	r21, 0x44	; 68
    11ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11f2:	dc 01       	movw	r26, r24
    11f4:	cb 01       	movw	r24, r22
    11f6:	f8 01       	movw	r30, r16
    11f8:	80 83       	st	Z, r24
    11fa:	91 83       	std	Z+1, r25	; 0x01
    11fc:	a2 83       	std	Z+2, r26	; 0x02
    11fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1200:	fe 01       	movw	r30, r28
    1202:	ff 96       	adiw	r30, 0x3f	; 63
    1204:	60 81       	ld	r22, Z
    1206:	71 81       	ldd	r23, Z+1	; 0x01
    1208:	82 81       	ldd	r24, Z+2	; 0x02
    120a:	93 81       	ldd	r25, Z+3	; 0x03
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	40 e8       	ldi	r20, 0x80	; 128
    1212:	5f e3       	ldi	r21, 0x3F	; 63
    1214:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1218:	88 23       	and	r24, r24
    121a:	2c f4       	brge	.+10     	; 0x1226 <LCD_SendCommand+0x8c>
		__ticks = 1;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	9e af       	std	Y+62, r25	; 0x3e
    1222:	8d af       	std	Y+61, r24	; 0x3d
    1224:	46 c0       	rjmp	.+140    	; 0x12b2 <LCD_SendCommand+0x118>
	else if (__tmp > 65535)
    1226:	fe 01       	movw	r30, r28
    1228:	ff 96       	adiw	r30, 0x3f	; 63
    122a:	60 81       	ld	r22, Z
    122c:	71 81       	ldd	r23, Z+1	; 0x01
    122e:	82 81       	ldd	r24, Z+2	; 0x02
    1230:	93 81       	ldd	r25, Z+3	; 0x03
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	3f ef       	ldi	r19, 0xFF	; 255
    1236:	4f e7       	ldi	r20, 0x7F	; 127
    1238:	57 e4       	ldi	r21, 0x47	; 71
    123a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    123e:	18 16       	cp	r1, r24
    1240:	64 f5       	brge	.+88     	; 0x129a <LCD_SendCommand+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1242:	fe 01       	movw	r30, r28
    1244:	ed 5b       	subi	r30, 0xBD	; 189
    1246:	ff 4f       	sbci	r31, 0xFF	; 255
    1248:	60 81       	ld	r22, Z
    124a:	71 81       	ldd	r23, Z+1	; 0x01
    124c:	82 81       	ldd	r24, Z+2	; 0x02
    124e:	93 81       	ldd	r25, Z+3	; 0x03
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	40 e2       	ldi	r20, 0x20	; 32
    1256:	51 e4       	ldi	r21, 0x41	; 65
    1258:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	bc 01       	movw	r22, r24
    1262:	cd 01       	movw	r24, r26
    1264:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	9e af       	std	Y+62, r25	; 0x3e
    126e:	8d af       	std	Y+61, r24	; 0x3d
    1270:	0f c0       	rjmp	.+30     	; 0x1290 <LCD_SendCommand+0xf6>
    1272:	88 ec       	ldi	r24, 0xC8	; 200
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	9c af       	std	Y+60, r25	; 0x3c
    1278:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    127a:	8b ad       	ldd	r24, Y+59	; 0x3b
    127c:	9c ad       	ldd	r25, Y+60	; 0x3c
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <LCD_SendCommand+0xe4>
    1282:	9c af       	std	Y+60, r25	; 0x3c
    1284:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1286:	8d ad       	ldd	r24, Y+61	; 0x3d
    1288:	9e ad       	ldd	r25, Y+62	; 0x3e
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	9e af       	std	Y+62, r25	; 0x3e
    128e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1290:	8d ad       	ldd	r24, Y+61	; 0x3d
    1292:	9e ad       	ldd	r25, Y+62	; 0x3e
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	69 f7       	brne	.-38     	; 0x1272 <LCD_SendCommand+0xd8>
    1298:	16 c0       	rjmp	.+44     	; 0x12c6 <LCD_SendCommand+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    129a:	fe 01       	movw	r30, r28
    129c:	ff 96       	adiw	r30, 0x3f	; 63
    129e:	60 81       	ld	r22, Z
    12a0:	71 81       	ldd	r23, Z+1	; 0x01
    12a2:	82 81       	ldd	r24, Z+2	; 0x02
    12a4:	93 81       	ldd	r25, Z+3	; 0x03
    12a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	9e af       	std	Y+62, r25	; 0x3e
    12b0:	8d af       	std	Y+61, r24	; 0x3d
    12b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    12b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    12b6:	9a af       	std	Y+58, r25	; 0x3a
    12b8:	89 af       	std	Y+57, r24	; 0x39
    12ba:	89 ad       	ldd	r24, Y+57	; 0x39
    12bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <LCD_SendCommand+0x124>
    12c2:	9a af       	std	Y+58, r25	; 0x3a
    12c4:	89 af       	std	Y+57, r24	; 0x39
	//LCD_Check_Busy();
	_delay_ms(10);
	DIO_SetPortValue(LCD_PORT,((LCD_PORT & 0x0F)|(Command & 0xF0)));
    12c6:	fe 01       	movw	r30, r28
    12c8:	e9 5b       	subi	r30, 0xB9	; 185
    12ca:	ff 4f       	sbci	r31, 0xFF	; 255
    12cc:	80 81       	ld	r24, Z
    12ce:	80 7f       	andi	r24, 0xF0	; 240
    12d0:	81 60       	ori	r24, 0x01	; 1
    12d2:	98 2f       	mov	r25, r24
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	69 2f       	mov	r22, r25
    12d8:	0e 94 75 14 	call	0x28ea	; 0x28ea <DIO_SetPortValue>


	DIO_SetPinValue(LCD_PORT,LCD_RS,LOW);
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	61 e0       	ldi	r22, 0x01	; 1
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_SetPinValue>
	//DIO_SetPinValue(LCD_PORT,LCD_RW,LOW);
	DIO_SetPinValue(LCD_PORT,LCD_E,HIGH);
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	63 e0       	ldi	r22, 0x03	; 3
    12ea:	41 e0       	ldi	r20, 0x01	; 1
    12ec:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_SetPinValue>
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	a0 e8       	ldi	r26, 0x80	; 128
    12f6:	bf e3       	ldi	r27, 0x3F	; 63
    12f8:	8d ab       	std	Y+53, r24	; 0x35
    12fa:	9e ab       	std	Y+54, r25	; 0x36
    12fc:	af ab       	std	Y+55, r26	; 0x37
    12fe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1300:	6d a9       	ldd	r22, Y+53	; 0x35
    1302:	7e a9       	ldd	r23, Y+54	; 0x36
    1304:	8f a9       	ldd	r24, Y+55	; 0x37
    1306:	98 ad       	ldd	r25, Y+56	; 0x38
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	4a ef       	ldi	r20, 0xFA	; 250
    130e:	54 e4       	ldi	r21, 0x44	; 68
    1310:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	89 ab       	std	Y+49, r24	; 0x31
    131a:	9a ab       	std	Y+50, r25	; 0x32
    131c:	ab ab       	std	Y+51, r26	; 0x33
    131e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1320:	69 a9       	ldd	r22, Y+49	; 0x31
    1322:	7a a9       	ldd	r23, Y+50	; 0x32
    1324:	8b a9       	ldd	r24, Y+51	; 0x33
    1326:	9c a9       	ldd	r25, Y+52	; 0x34
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	40 e8       	ldi	r20, 0x80	; 128
    132e:	5f e3       	ldi	r21, 0x3F	; 63
    1330:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1334:	88 23       	and	r24, r24
    1336:	2c f4       	brge	.+10     	; 0x1342 <LCD_SendCommand+0x1a8>
		__ticks = 1;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	98 ab       	std	Y+48, r25	; 0x30
    133e:	8f a7       	std	Y+47, r24	; 0x2f
    1340:	3f c0       	rjmp	.+126    	; 0x13c0 <LCD_SendCommand+0x226>
	else if (__tmp > 65535)
    1342:	69 a9       	ldd	r22, Y+49	; 0x31
    1344:	7a a9       	ldd	r23, Y+50	; 0x32
    1346:	8b a9       	ldd	r24, Y+51	; 0x33
    1348:	9c a9       	ldd	r25, Y+52	; 0x34
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	3f ef       	ldi	r19, 0xFF	; 255
    134e:	4f e7       	ldi	r20, 0x7F	; 127
    1350:	57 e4       	ldi	r21, 0x47	; 71
    1352:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1356:	18 16       	cp	r1, r24
    1358:	4c f5       	brge	.+82     	; 0x13ac <LCD_SendCommand+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    135a:	6d a9       	ldd	r22, Y+53	; 0x35
    135c:	7e a9       	ldd	r23, Y+54	; 0x36
    135e:	8f a9       	ldd	r24, Y+55	; 0x37
    1360:	98 ad       	ldd	r25, Y+56	; 0x38
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	40 e2       	ldi	r20, 0x20	; 32
    1368:	51 e4       	ldi	r21, 0x41	; 65
    136a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	bc 01       	movw	r22, r24
    1374:	cd 01       	movw	r24, r26
    1376:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	98 ab       	std	Y+48, r25	; 0x30
    1380:	8f a7       	std	Y+47, r24	; 0x2f
    1382:	0f c0       	rjmp	.+30     	; 0x13a2 <LCD_SendCommand+0x208>
    1384:	88 ec       	ldi	r24, 0xC8	; 200
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	9e a7       	std	Y+46, r25	; 0x2e
    138a:	8d a7       	std	Y+45, r24	; 0x2d
    138c:	8d a5       	ldd	r24, Y+45	; 0x2d
    138e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	f1 f7       	brne	.-4      	; 0x1390 <LCD_SendCommand+0x1f6>
    1394:	9e a7       	std	Y+46, r25	; 0x2e
    1396:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1398:	8f a5       	ldd	r24, Y+47	; 0x2f
    139a:	98 a9       	ldd	r25, Y+48	; 0x30
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	98 ab       	std	Y+48, r25	; 0x30
    13a0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    13a4:	98 a9       	ldd	r25, Y+48	; 0x30
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	69 f7       	brne	.-38     	; 0x1384 <LCD_SendCommand+0x1ea>
    13aa:	14 c0       	rjmp	.+40     	; 0x13d4 <LCD_SendCommand+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ac:	69 a9       	ldd	r22, Y+49	; 0x31
    13ae:	7a a9       	ldd	r23, Y+50	; 0x32
    13b0:	8b a9       	ldd	r24, Y+51	; 0x33
    13b2:	9c a9       	ldd	r25, Y+52	; 0x34
    13b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	98 ab       	std	Y+48, r25	; 0x30
    13be:	8f a7       	std	Y+47, r24	; 0x2f
    13c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    13c2:	98 a9       	ldd	r25, Y+48	; 0x30
    13c4:	9c a7       	std	Y+44, r25	; 0x2c
    13c6:	8b a7       	std	Y+43, r24	; 0x2b
    13c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    13ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    13cc:	01 97       	sbiw	r24, 0x01	; 1
    13ce:	f1 f7       	brne	.-4      	; 0x13cc <LCD_SendCommand+0x232>
    13d0:	9c a7       	std	Y+44, r25	; 0x2c
    13d2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_SetPinValue(LCD_PORT,LCD_E,LOW);
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	63 e0       	ldi	r22, 0x03	; 3
    13d8:	40 e0       	ldi	r20, 0x00	; 0
    13da:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_SetPinValue>
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	a0 e8       	ldi	r26, 0x80	; 128
    13e4:	bf e3       	ldi	r27, 0x3F	; 63
    13e6:	8f a3       	std	Y+39, r24	; 0x27
    13e8:	98 a7       	std	Y+40, r25	; 0x28
    13ea:	a9 a7       	std	Y+41, r26	; 0x29
    13ec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ee:	6f a1       	ldd	r22, Y+39	; 0x27
    13f0:	78 a5       	ldd	r23, Y+40	; 0x28
    13f2:	89 a5       	ldd	r24, Y+41	; 0x29
    13f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	4a ef       	ldi	r20, 0xFA	; 250
    13fc:	54 e4       	ldi	r21, 0x44	; 68
    13fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	8b a3       	std	Y+35, r24	; 0x23
    1408:	9c a3       	std	Y+36, r25	; 0x24
    140a:	ad a3       	std	Y+37, r26	; 0x25
    140c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    140e:	6b a1       	ldd	r22, Y+35	; 0x23
    1410:	7c a1       	ldd	r23, Y+36	; 0x24
    1412:	8d a1       	ldd	r24, Y+37	; 0x25
    1414:	9e a1       	ldd	r25, Y+38	; 0x26
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	40 e8       	ldi	r20, 0x80	; 128
    141c:	5f e3       	ldi	r21, 0x3F	; 63
    141e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1422:	88 23       	and	r24, r24
    1424:	2c f4       	brge	.+10     	; 0x1430 <LCD_SendCommand+0x296>
		__ticks = 1;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	9a a3       	std	Y+34, r25	; 0x22
    142c:	89 a3       	std	Y+33, r24	; 0x21
    142e:	3f c0       	rjmp	.+126    	; 0x14ae <LCD_SendCommand+0x314>
	else if (__tmp > 65535)
    1430:	6b a1       	ldd	r22, Y+35	; 0x23
    1432:	7c a1       	ldd	r23, Y+36	; 0x24
    1434:	8d a1       	ldd	r24, Y+37	; 0x25
    1436:	9e a1       	ldd	r25, Y+38	; 0x26
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	3f ef       	ldi	r19, 0xFF	; 255
    143c:	4f e7       	ldi	r20, 0x7F	; 127
    143e:	57 e4       	ldi	r21, 0x47	; 71
    1440:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1444:	18 16       	cp	r1, r24
    1446:	4c f5       	brge	.+82     	; 0x149a <LCD_SendCommand+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1448:	6f a1       	ldd	r22, Y+39	; 0x27
    144a:	78 a5       	ldd	r23, Y+40	; 0x28
    144c:	89 a5       	ldd	r24, Y+41	; 0x29
    144e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e2       	ldi	r20, 0x20	; 32
    1456:	51 e4       	ldi	r21, 0x41	; 65
    1458:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	bc 01       	movw	r22, r24
    1462:	cd 01       	movw	r24, r26
    1464:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	9a a3       	std	Y+34, r25	; 0x22
    146e:	89 a3       	std	Y+33, r24	; 0x21
    1470:	0f c0       	rjmp	.+30     	; 0x1490 <LCD_SendCommand+0x2f6>
    1472:	88 ec       	ldi	r24, 0xC8	; 200
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	98 a3       	std	Y+32, r25	; 0x20
    1478:	8f 8f       	std	Y+31, r24	; 0x1f
    147a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    147c:	98 a1       	ldd	r25, Y+32	; 0x20
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	f1 f7       	brne	.-4      	; 0x147e <LCD_SendCommand+0x2e4>
    1482:	98 a3       	std	Y+32, r25	; 0x20
    1484:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1486:	89 a1       	ldd	r24, Y+33	; 0x21
    1488:	9a a1       	ldd	r25, Y+34	; 0x22
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	9a a3       	std	Y+34, r25	; 0x22
    148e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1490:	89 a1       	ldd	r24, Y+33	; 0x21
    1492:	9a a1       	ldd	r25, Y+34	; 0x22
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	69 f7       	brne	.-38     	; 0x1472 <LCD_SendCommand+0x2d8>
    1498:	14 c0       	rjmp	.+40     	; 0x14c2 <LCD_SendCommand+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    149a:	6b a1       	ldd	r22, Y+35	; 0x23
    149c:	7c a1       	ldd	r23, Y+36	; 0x24
    149e:	8d a1       	ldd	r24, Y+37	; 0x25
    14a0:	9e a1       	ldd	r25, Y+38	; 0x26
    14a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	9a a3       	std	Y+34, r25	; 0x22
    14ac:	89 a3       	std	Y+33, r24	; 0x21
    14ae:	89 a1       	ldd	r24, Y+33	; 0x21
    14b0:	9a a1       	ldd	r25, Y+34	; 0x22
    14b2:	9e 8f       	std	Y+30, r25	; 0x1e
    14b4:	8d 8f       	std	Y+29, r24	; 0x1d
    14b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	f1 f7       	brne	.-4      	; 0x14ba <LCD_SendCommand+0x320>
    14be:	9e 8f       	std	Y+30, r25	; 0x1e
    14c0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

		DIO_SetPortValue(LCD_PORT,(LCD_PORT & 0x0F) | (Command << 4));
    14c2:	fe 01       	movw	r30, r28
    14c4:	e9 5b       	subi	r30, 0xB9	; 185
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	80 81       	ld	r24, Z
    14ca:	88 2f       	mov	r24, r24
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	82 95       	swap	r24
    14d0:	92 95       	swap	r25
    14d2:	90 7f       	andi	r25, 0xF0	; 240
    14d4:	98 27       	eor	r25, r24
    14d6:	80 7f       	andi	r24, 0xF0	; 240
    14d8:	98 27       	eor	r25, r24
    14da:	81 60       	ori	r24, 0x01	; 1
    14dc:	98 2f       	mov	r25, r24
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	69 2f       	mov	r22, r25
    14e2:	0e 94 75 14 	call	0x28ea	; 0x28ea <DIO_SetPortValue>
		DIO_SetPinValue(LCD_PORT,LCD_RS,LOW);
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	61 e0       	ldi	r22, 0x01	; 1
    14ea:	40 e0       	ldi	r20, 0x00	; 0
    14ec:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_SetPinValue>
	//	DIO_SetPinValue(LCD_PORT,LCD_RW,LOW);
		DIO_SetPinValue(LCD_PORT,LCD_E,HIGH);
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	63 e0       	ldi	r22, 0x03	; 3
    14f4:	41 e0       	ldi	r20, 0x01	; 1
    14f6:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_SetPinValue>
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	a0 e8       	ldi	r26, 0x80	; 128
    1500:	bf e3       	ldi	r27, 0x3F	; 63
    1502:	89 8f       	std	Y+25, r24	; 0x19
    1504:	9a 8f       	std	Y+26, r25	; 0x1a
    1506:	ab 8f       	std	Y+27, r26	; 0x1b
    1508:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    150a:	69 8d       	ldd	r22, Y+25	; 0x19
    150c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    150e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1510:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	4a ef       	ldi	r20, 0xFA	; 250
    1518:	54 e4       	ldi	r21, 0x44	; 68
    151a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	8d 8b       	std	Y+21, r24	; 0x15
    1524:	9e 8b       	std	Y+22, r25	; 0x16
    1526:	af 8b       	std	Y+23, r26	; 0x17
    1528:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    152a:	6d 89       	ldd	r22, Y+21	; 0x15
    152c:	7e 89       	ldd	r23, Y+22	; 0x16
    152e:	8f 89       	ldd	r24, Y+23	; 0x17
    1530:	98 8d       	ldd	r25, Y+24	; 0x18
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	40 e8       	ldi	r20, 0x80	; 128
    1538:	5f e3       	ldi	r21, 0x3F	; 63
    153a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    153e:	88 23       	and	r24, r24
    1540:	2c f4       	brge	.+10     	; 0x154c <LCD_SendCommand+0x3b2>
		__ticks = 1;
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	9c 8b       	std	Y+20, r25	; 0x14
    1548:	8b 8b       	std	Y+19, r24	; 0x13
    154a:	3f c0       	rjmp	.+126    	; 0x15ca <LCD_SendCommand+0x430>
	else if (__tmp > 65535)
    154c:	6d 89       	ldd	r22, Y+21	; 0x15
    154e:	7e 89       	ldd	r23, Y+22	; 0x16
    1550:	8f 89       	ldd	r24, Y+23	; 0x17
    1552:	98 8d       	ldd	r25, Y+24	; 0x18
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	3f ef       	ldi	r19, 0xFF	; 255
    1558:	4f e7       	ldi	r20, 0x7F	; 127
    155a:	57 e4       	ldi	r21, 0x47	; 71
    155c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1560:	18 16       	cp	r1, r24
    1562:	4c f5       	brge	.+82     	; 0x15b6 <LCD_SendCommand+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1564:	69 8d       	ldd	r22, Y+25	; 0x19
    1566:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1568:	8b 8d       	ldd	r24, Y+27	; 0x1b
    156a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	40 e2       	ldi	r20, 0x20	; 32
    1572:	51 e4       	ldi	r21, 0x41	; 65
    1574:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	bc 01       	movw	r22, r24
    157e:	cd 01       	movw	r24, r26
    1580:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	9c 8b       	std	Y+20, r25	; 0x14
    158a:	8b 8b       	std	Y+19, r24	; 0x13
    158c:	0f c0       	rjmp	.+30     	; 0x15ac <LCD_SendCommand+0x412>
    158e:	88 ec       	ldi	r24, 0xC8	; 200
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	9a 8b       	std	Y+18, r25	; 0x12
    1594:	89 8b       	std	Y+17, r24	; 0x11
    1596:	89 89       	ldd	r24, Y+17	; 0x11
    1598:	9a 89       	ldd	r25, Y+18	; 0x12
    159a:	01 97       	sbiw	r24, 0x01	; 1
    159c:	f1 f7       	brne	.-4      	; 0x159a <LCD_SendCommand+0x400>
    159e:	9a 8b       	std	Y+18, r25	; 0x12
    15a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a2:	8b 89       	ldd	r24, Y+19	; 0x13
    15a4:	9c 89       	ldd	r25, Y+20	; 0x14
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	9c 8b       	std	Y+20, r25	; 0x14
    15aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ac:	8b 89       	ldd	r24, Y+19	; 0x13
    15ae:	9c 89       	ldd	r25, Y+20	; 0x14
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	69 f7       	brne	.-38     	; 0x158e <LCD_SendCommand+0x3f4>
    15b4:	14 c0       	rjmp	.+40     	; 0x15de <LCD_SendCommand+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b6:	6d 89       	ldd	r22, Y+21	; 0x15
    15b8:	7e 89       	ldd	r23, Y+22	; 0x16
    15ba:	8f 89       	ldd	r24, Y+23	; 0x17
    15bc:	98 8d       	ldd	r25, Y+24	; 0x18
    15be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	9c 8b       	std	Y+20, r25	; 0x14
    15c8:	8b 8b       	std	Y+19, r24	; 0x13
    15ca:	8b 89       	ldd	r24, Y+19	; 0x13
    15cc:	9c 89       	ldd	r25, Y+20	; 0x14
    15ce:	98 8b       	std	Y+16, r25	; 0x10
    15d0:	8f 87       	std	Y+15, r24	; 0x0f
    15d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15d4:	98 89       	ldd	r25, Y+16	; 0x10
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	f1 f7       	brne	.-4      	; 0x15d6 <LCD_SendCommand+0x43c>
    15da:	98 8b       	std	Y+16, r25	; 0x10
    15dc:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_SetPinValue(LCD_PORT,LCD_E,LOW);
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	63 e0       	ldi	r22, 0x03	; 3
    15e2:	40 e0       	ldi	r20, 0x00	; 0
    15e4:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_SetPinValue>
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	a0 e0       	ldi	r26, 0x00	; 0
    15ee:	b0 e4       	ldi	r27, 0x40	; 64
    15f0:	8b 87       	std	Y+11, r24	; 0x0b
    15f2:	9c 87       	std	Y+12, r25	; 0x0c
    15f4:	ad 87       	std	Y+13, r26	; 0x0d
    15f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    15fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	4a ef       	ldi	r20, 0xFA	; 250
    1606:	54 e4       	ldi	r21, 0x44	; 68
    1608:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	8f 83       	std	Y+7, r24	; 0x07
    1612:	98 87       	std	Y+8, r25	; 0x08
    1614:	a9 87       	std	Y+9, r26	; 0x09
    1616:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1618:	6f 81       	ldd	r22, Y+7	; 0x07
    161a:	78 85       	ldd	r23, Y+8	; 0x08
    161c:	89 85       	ldd	r24, Y+9	; 0x09
    161e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e8       	ldi	r20, 0x80	; 128
    1626:	5f e3       	ldi	r21, 0x3F	; 63
    1628:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    162c:	88 23       	and	r24, r24
    162e:	2c f4       	brge	.+10     	; 0x163a <LCD_SendCommand+0x4a0>
		__ticks = 1;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	9e 83       	std	Y+6, r25	; 0x06
    1636:	8d 83       	std	Y+5, r24	; 0x05
    1638:	3f c0       	rjmp	.+126    	; 0x16b8 <LCD_SendCommand+0x51e>
	else if (__tmp > 65535)
    163a:	6f 81       	ldd	r22, Y+7	; 0x07
    163c:	78 85       	ldd	r23, Y+8	; 0x08
    163e:	89 85       	ldd	r24, Y+9	; 0x09
    1640:	9a 85       	ldd	r25, Y+10	; 0x0a
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	3f ef       	ldi	r19, 0xFF	; 255
    1646:	4f e7       	ldi	r20, 0x7F	; 127
    1648:	57 e4       	ldi	r21, 0x47	; 71
    164a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    164e:	18 16       	cp	r1, r24
    1650:	4c f5       	brge	.+82     	; 0x16a4 <LCD_SendCommand+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1652:	6b 85       	ldd	r22, Y+11	; 0x0b
    1654:	7c 85       	ldd	r23, Y+12	; 0x0c
    1656:	8d 85       	ldd	r24, Y+13	; 0x0d
    1658:	9e 85       	ldd	r25, Y+14	; 0x0e
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	40 e2       	ldi	r20, 0x20	; 32
    1660:	51 e4       	ldi	r21, 0x41	; 65
    1662:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	bc 01       	movw	r22, r24
    166c:	cd 01       	movw	r24, r26
    166e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	9e 83       	std	Y+6, r25	; 0x06
    1678:	8d 83       	std	Y+5, r24	; 0x05
    167a:	0f c0       	rjmp	.+30     	; 0x169a <LCD_SendCommand+0x500>
    167c:	88 ec       	ldi	r24, 0xC8	; 200
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	9c 83       	std	Y+4, r25	; 0x04
    1682:	8b 83       	std	Y+3, r24	; 0x03
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	9c 81       	ldd	r25, Y+4	; 0x04
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	f1 f7       	brne	.-4      	; 0x1688 <LCD_SendCommand+0x4ee>
    168c:	9c 83       	std	Y+4, r25	; 0x04
    168e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1690:	8d 81       	ldd	r24, Y+5	; 0x05
    1692:	9e 81       	ldd	r25, Y+6	; 0x06
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	9e 83       	std	Y+6, r25	; 0x06
    1698:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	9e 81       	ldd	r25, Y+6	; 0x06
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	69 f7       	brne	.-38     	; 0x167c <LCD_SendCommand+0x4e2>
    16a2:	14 c0       	rjmp	.+40     	; 0x16cc <LCD_SendCommand+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a4:	6f 81       	ldd	r22, Y+7	; 0x07
    16a6:	78 85       	ldd	r23, Y+8	; 0x08
    16a8:	89 85       	ldd	r24, Y+9	; 0x09
    16aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	9e 83       	std	Y+6, r25	; 0x06
    16b6:	8d 83       	std	Y+5, r24	; 0x05
    16b8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ba:	9e 81       	ldd	r25, Y+6	; 0x06
    16bc:	9a 83       	std	Y+2, r25	; 0x02
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	9a 81       	ldd	r25, Y+2	; 0x02
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	f1 f7       	brne	.-4      	; 0x16c4 <LCD_SendCommand+0x52a>
    16c8:	9a 83       	std	Y+2, r25	; 0x02
    16ca:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
}
    16cc:	c9 5b       	subi	r28, 0xB9	; 185
    16ce:	df 4f       	sbci	r29, 0xFF	; 255
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	08 95       	ret

000016e4 <LCD_SendChar>:

void LCD_SendChar(uint8_t Char)
{
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	e9 97       	sbiw	r28, 0x39	; 57
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	89 af       	std	Y+57, r24	; 0x39
//	LCD_Check_Busy();
	DIO_SetPortValue(LCD_PORT,((LCD_PORT & 0x0F) | (Char & 0xF0)));
    16fa:	89 ad       	ldd	r24, Y+57	; 0x39
    16fc:	80 7f       	andi	r24, 0xF0	; 240
    16fe:	81 60       	ori	r24, 0x01	; 1
    1700:	98 2f       	mov	r25, r24
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	69 2f       	mov	r22, r25
    1706:	0e 94 75 14 	call	0x28ea	; 0x28ea <DIO_SetPortValue>
	DIO_SetPinValue(LCD_PORT,LCD_RS,HIGH);
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	61 e0       	ldi	r22, 0x01	; 1
    170e:	41 e0       	ldi	r20, 0x01	; 1
    1710:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_SetPinValue>
	//DIO_SetPinValue(LCD_PORT,LCD_RW,LOW);
	DIO_SetPinValue(LCD_PORT,LCD_E,HIGH);
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	63 e0       	ldi	r22, 0x03	; 3
    1718:	41 e0       	ldi	r20, 0x01	; 1
    171a:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_SetPinValue>
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	a0 e8       	ldi	r26, 0x80	; 128
    1724:	bf e3       	ldi	r27, 0x3F	; 63
    1726:	8d ab       	std	Y+53, r24	; 0x35
    1728:	9e ab       	std	Y+54, r25	; 0x36
    172a:	af ab       	std	Y+55, r26	; 0x37
    172c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172e:	6d a9       	ldd	r22, Y+53	; 0x35
    1730:	7e a9       	ldd	r23, Y+54	; 0x36
    1732:	8f a9       	ldd	r24, Y+55	; 0x37
    1734:	98 ad       	ldd	r25, Y+56	; 0x38
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	4a ef       	ldi	r20, 0xFA	; 250
    173c:	54 e4       	ldi	r21, 0x44	; 68
    173e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	89 ab       	std	Y+49, r24	; 0x31
    1748:	9a ab       	std	Y+50, r25	; 0x32
    174a:	ab ab       	std	Y+51, r26	; 0x33
    174c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    174e:	69 a9       	ldd	r22, Y+49	; 0x31
    1750:	7a a9       	ldd	r23, Y+50	; 0x32
    1752:	8b a9       	ldd	r24, Y+51	; 0x33
    1754:	9c a9       	ldd	r25, Y+52	; 0x34
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e8       	ldi	r20, 0x80	; 128
    175c:	5f e3       	ldi	r21, 0x3F	; 63
    175e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1762:	88 23       	and	r24, r24
    1764:	2c f4       	brge	.+10     	; 0x1770 <LCD_SendChar+0x8c>
		__ticks = 1;
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	98 ab       	std	Y+48, r25	; 0x30
    176c:	8f a7       	std	Y+47, r24	; 0x2f
    176e:	3f c0       	rjmp	.+126    	; 0x17ee <LCD_SendChar+0x10a>
	else if (__tmp > 65535)
    1770:	69 a9       	ldd	r22, Y+49	; 0x31
    1772:	7a a9       	ldd	r23, Y+50	; 0x32
    1774:	8b a9       	ldd	r24, Y+51	; 0x33
    1776:	9c a9       	ldd	r25, Y+52	; 0x34
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	3f ef       	ldi	r19, 0xFF	; 255
    177c:	4f e7       	ldi	r20, 0x7F	; 127
    177e:	57 e4       	ldi	r21, 0x47	; 71
    1780:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1784:	18 16       	cp	r1, r24
    1786:	4c f5       	brge	.+82     	; 0x17da <LCD_SendChar+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1788:	6d a9       	ldd	r22, Y+53	; 0x35
    178a:	7e a9       	ldd	r23, Y+54	; 0x36
    178c:	8f a9       	ldd	r24, Y+55	; 0x37
    178e:	98 ad       	ldd	r25, Y+56	; 0x38
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e2       	ldi	r20, 0x20	; 32
    1796:	51 e4       	ldi	r21, 0x41	; 65
    1798:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	bc 01       	movw	r22, r24
    17a2:	cd 01       	movw	r24, r26
    17a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	98 ab       	std	Y+48, r25	; 0x30
    17ae:	8f a7       	std	Y+47, r24	; 0x2f
    17b0:	0f c0       	rjmp	.+30     	; 0x17d0 <LCD_SendChar+0xec>
    17b2:	88 ec       	ldi	r24, 0xC8	; 200
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	9e a7       	std	Y+46, r25	; 0x2e
    17b8:	8d a7       	std	Y+45, r24	; 0x2d
    17ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    17bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	f1 f7       	brne	.-4      	; 0x17be <LCD_SendChar+0xda>
    17c2:	9e a7       	std	Y+46, r25	; 0x2e
    17c4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17c8:	98 a9       	ldd	r25, Y+48	; 0x30
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	98 ab       	std	Y+48, r25	; 0x30
    17ce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17d2:	98 a9       	ldd	r25, Y+48	; 0x30
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	69 f7       	brne	.-38     	; 0x17b2 <LCD_SendChar+0xce>
    17d8:	14 c0       	rjmp	.+40     	; 0x1802 <LCD_SendChar+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17da:	69 a9       	ldd	r22, Y+49	; 0x31
    17dc:	7a a9       	ldd	r23, Y+50	; 0x32
    17de:	8b a9       	ldd	r24, Y+51	; 0x33
    17e0:	9c a9       	ldd	r25, Y+52	; 0x34
    17e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	98 ab       	std	Y+48, r25	; 0x30
    17ec:	8f a7       	std	Y+47, r24	; 0x2f
    17ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    17f0:	98 a9       	ldd	r25, Y+48	; 0x30
    17f2:	9c a7       	std	Y+44, r25	; 0x2c
    17f4:	8b a7       	std	Y+43, r24	; 0x2b
    17f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    17f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <LCD_SendChar+0x116>
    17fe:	9c a7       	std	Y+44, r25	; 0x2c
    1800:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_SetPinValue(LCD_PORT,LCD_E,LOW);
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	63 e0       	ldi	r22, 0x03	; 3
    1806:	40 e0       	ldi	r20, 0x00	; 0
    1808:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_SetPinValue>
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	a0 e8       	ldi	r26, 0x80	; 128
    1812:	bf e3       	ldi	r27, 0x3F	; 63
    1814:	8f a3       	std	Y+39, r24	; 0x27
    1816:	98 a7       	std	Y+40, r25	; 0x28
    1818:	a9 a7       	std	Y+41, r26	; 0x29
    181a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181c:	6f a1       	ldd	r22, Y+39	; 0x27
    181e:	78 a5       	ldd	r23, Y+40	; 0x28
    1820:	89 a5       	ldd	r24, Y+41	; 0x29
    1822:	9a a5       	ldd	r25, Y+42	; 0x2a
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	4a ef       	ldi	r20, 0xFA	; 250
    182a:	54 e4       	ldi	r21, 0x44	; 68
    182c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	8b a3       	std	Y+35, r24	; 0x23
    1836:	9c a3       	std	Y+36, r25	; 0x24
    1838:	ad a3       	std	Y+37, r26	; 0x25
    183a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    183c:	6b a1       	ldd	r22, Y+35	; 0x23
    183e:	7c a1       	ldd	r23, Y+36	; 0x24
    1840:	8d a1       	ldd	r24, Y+37	; 0x25
    1842:	9e a1       	ldd	r25, Y+38	; 0x26
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e8       	ldi	r20, 0x80	; 128
    184a:	5f e3       	ldi	r21, 0x3F	; 63
    184c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1850:	88 23       	and	r24, r24
    1852:	2c f4       	brge	.+10     	; 0x185e <LCD_SendChar+0x17a>
		__ticks = 1;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	9a a3       	std	Y+34, r25	; 0x22
    185a:	89 a3       	std	Y+33, r24	; 0x21
    185c:	3f c0       	rjmp	.+126    	; 0x18dc <LCD_SendChar+0x1f8>
	else if (__tmp > 65535)
    185e:	6b a1       	ldd	r22, Y+35	; 0x23
    1860:	7c a1       	ldd	r23, Y+36	; 0x24
    1862:	8d a1       	ldd	r24, Y+37	; 0x25
    1864:	9e a1       	ldd	r25, Y+38	; 0x26
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	3f ef       	ldi	r19, 0xFF	; 255
    186a:	4f e7       	ldi	r20, 0x7F	; 127
    186c:	57 e4       	ldi	r21, 0x47	; 71
    186e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1872:	18 16       	cp	r1, r24
    1874:	4c f5       	brge	.+82     	; 0x18c8 <LCD_SendChar+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1876:	6f a1       	ldd	r22, Y+39	; 0x27
    1878:	78 a5       	ldd	r23, Y+40	; 0x28
    187a:	89 a5       	ldd	r24, Y+41	; 0x29
    187c:	9a a5       	ldd	r25, Y+42	; 0x2a
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	40 e2       	ldi	r20, 0x20	; 32
    1884:	51 e4       	ldi	r21, 0x41	; 65
    1886:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	bc 01       	movw	r22, r24
    1890:	cd 01       	movw	r24, r26
    1892:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	9a a3       	std	Y+34, r25	; 0x22
    189c:	89 a3       	std	Y+33, r24	; 0x21
    189e:	0f c0       	rjmp	.+30     	; 0x18be <LCD_SendChar+0x1da>
    18a0:	88 ec       	ldi	r24, 0xC8	; 200
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	98 a3       	std	Y+32, r25	; 0x20
    18a6:	8f 8f       	std	Y+31, r24	; 0x1f
    18a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18aa:	98 a1       	ldd	r25, Y+32	; 0x20
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <LCD_SendChar+0x1c8>
    18b0:	98 a3       	std	Y+32, r25	; 0x20
    18b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b4:	89 a1       	ldd	r24, Y+33	; 0x21
    18b6:	9a a1       	ldd	r25, Y+34	; 0x22
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	9a a3       	std	Y+34, r25	; 0x22
    18bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18be:	89 a1       	ldd	r24, Y+33	; 0x21
    18c0:	9a a1       	ldd	r25, Y+34	; 0x22
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	69 f7       	brne	.-38     	; 0x18a0 <LCD_SendChar+0x1bc>
    18c6:	14 c0       	rjmp	.+40     	; 0x18f0 <LCD_SendChar+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c8:	6b a1       	ldd	r22, Y+35	; 0x23
    18ca:	7c a1       	ldd	r23, Y+36	; 0x24
    18cc:	8d a1       	ldd	r24, Y+37	; 0x25
    18ce:	9e a1       	ldd	r25, Y+38	; 0x26
    18d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	9a a3       	std	Y+34, r25	; 0x22
    18da:	89 a3       	std	Y+33, r24	; 0x21
    18dc:	89 a1       	ldd	r24, Y+33	; 0x21
    18de:	9a a1       	ldd	r25, Y+34	; 0x22
    18e0:	9e 8f       	std	Y+30, r25	; 0x1e
    18e2:	8d 8f       	std	Y+29, r24	; 0x1d
    18e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <LCD_SendChar+0x204>
    18ec:	9e 8f       	std	Y+30, r25	; 0x1e
    18ee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_SetPortValue(LCD_PORT,((LCD_PORT & 0x0F) | (Char << 4)));
    18f0:	89 ad       	ldd	r24, Y+57	; 0x39
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	82 95       	swap	r24
    18f8:	92 95       	swap	r25
    18fa:	90 7f       	andi	r25, 0xF0	; 240
    18fc:	98 27       	eor	r25, r24
    18fe:	80 7f       	andi	r24, 0xF0	; 240
    1900:	98 27       	eor	r25, r24
    1902:	81 60       	ori	r24, 0x01	; 1
    1904:	98 2f       	mov	r25, r24
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	69 2f       	mov	r22, r25
    190a:	0e 94 75 14 	call	0x28ea	; 0x28ea <DIO_SetPortValue>
	DIO_SetPinValue(LCD_PORT,LCD_RS,HIGH);
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	61 e0       	ldi	r22, 0x01	; 1
    1912:	41 e0       	ldi	r20, 0x01	; 1
    1914:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_SetPinValue>
		//DIO_SetPinValue(LCD_PORT,LCD_RW,LOW);
		DIO_SetPinValue(LCD_PORT,LCD_E,HIGH);
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	63 e0       	ldi	r22, 0x03	; 3
    191c:	41 e0       	ldi	r20, 0x01	; 1
    191e:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_SetPinValue>
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	a0 e8       	ldi	r26, 0x80	; 128
    1928:	bf e3       	ldi	r27, 0x3F	; 63
    192a:	89 8f       	std	Y+25, r24	; 0x19
    192c:	9a 8f       	std	Y+26, r25	; 0x1a
    192e:	ab 8f       	std	Y+27, r26	; 0x1b
    1930:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1932:	69 8d       	ldd	r22, Y+25	; 0x19
    1934:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1936:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1938:	9c 8d       	ldd	r25, Y+28	; 0x1c
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	4a ef       	ldi	r20, 0xFA	; 250
    1940:	54 e4       	ldi	r21, 0x44	; 68
    1942:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	8d 8b       	std	Y+21, r24	; 0x15
    194c:	9e 8b       	std	Y+22, r25	; 0x16
    194e:	af 8b       	std	Y+23, r26	; 0x17
    1950:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1952:	6d 89       	ldd	r22, Y+21	; 0x15
    1954:	7e 89       	ldd	r23, Y+22	; 0x16
    1956:	8f 89       	ldd	r24, Y+23	; 0x17
    1958:	98 8d       	ldd	r25, Y+24	; 0x18
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e8       	ldi	r20, 0x80	; 128
    1960:	5f e3       	ldi	r21, 0x3F	; 63
    1962:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1966:	88 23       	and	r24, r24
    1968:	2c f4       	brge	.+10     	; 0x1974 <LCD_SendChar+0x290>
		__ticks = 1;
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	9c 8b       	std	Y+20, r25	; 0x14
    1970:	8b 8b       	std	Y+19, r24	; 0x13
    1972:	3f c0       	rjmp	.+126    	; 0x19f2 <LCD_SendChar+0x30e>
	else if (__tmp > 65535)
    1974:	6d 89       	ldd	r22, Y+21	; 0x15
    1976:	7e 89       	ldd	r23, Y+22	; 0x16
    1978:	8f 89       	ldd	r24, Y+23	; 0x17
    197a:	98 8d       	ldd	r25, Y+24	; 0x18
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	3f ef       	ldi	r19, 0xFF	; 255
    1980:	4f e7       	ldi	r20, 0x7F	; 127
    1982:	57 e4       	ldi	r21, 0x47	; 71
    1984:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1988:	18 16       	cp	r1, r24
    198a:	4c f5       	brge	.+82     	; 0x19de <LCD_SendChar+0x2fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198c:	69 8d       	ldd	r22, Y+25	; 0x19
    198e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1990:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1992:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e2       	ldi	r20, 0x20	; 32
    199a:	51 e4       	ldi	r21, 0x41	; 65
    199c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	bc 01       	movw	r22, r24
    19a6:	cd 01       	movw	r24, r26
    19a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	9c 8b       	std	Y+20, r25	; 0x14
    19b2:	8b 8b       	std	Y+19, r24	; 0x13
    19b4:	0f c0       	rjmp	.+30     	; 0x19d4 <LCD_SendChar+0x2f0>
    19b6:	88 ec       	ldi	r24, 0xC8	; 200
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	9a 8b       	std	Y+18, r25	; 0x12
    19bc:	89 8b       	std	Y+17, r24	; 0x11
    19be:	89 89       	ldd	r24, Y+17	; 0x11
    19c0:	9a 89       	ldd	r25, Y+18	; 0x12
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <LCD_SendChar+0x2de>
    19c6:	9a 8b       	std	Y+18, r25	; 0x12
    19c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ca:	8b 89       	ldd	r24, Y+19	; 0x13
    19cc:	9c 89       	ldd	r25, Y+20	; 0x14
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	9c 8b       	std	Y+20, r25	; 0x14
    19d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d4:	8b 89       	ldd	r24, Y+19	; 0x13
    19d6:	9c 89       	ldd	r25, Y+20	; 0x14
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	69 f7       	brne	.-38     	; 0x19b6 <LCD_SendChar+0x2d2>
    19dc:	14 c0       	rjmp	.+40     	; 0x1a06 <LCD_SendChar+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19de:	6d 89       	ldd	r22, Y+21	; 0x15
    19e0:	7e 89       	ldd	r23, Y+22	; 0x16
    19e2:	8f 89       	ldd	r24, Y+23	; 0x17
    19e4:	98 8d       	ldd	r25, Y+24	; 0x18
    19e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	9c 8b       	std	Y+20, r25	; 0x14
    19f0:	8b 8b       	std	Y+19, r24	; 0x13
    19f2:	8b 89       	ldd	r24, Y+19	; 0x13
    19f4:	9c 89       	ldd	r25, Y+20	; 0x14
    19f6:	98 8b       	std	Y+16, r25	; 0x10
    19f8:	8f 87       	std	Y+15, r24	; 0x0f
    19fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    19fc:	98 89       	ldd	r25, Y+16	; 0x10
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	f1 f7       	brne	.-4      	; 0x19fe <LCD_SendChar+0x31a>
    1a02:	98 8b       	std	Y+16, r25	; 0x10
    1a04:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_SetPinValue(LCD_PORT,LCD_E,LOW);
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	63 e0       	ldi	r22, 0x03	; 3
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_SetPinValue>
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	a0 e8       	ldi	r26, 0x80	; 128
    1a16:	bf e3       	ldi	r27, 0x3F	; 63
    1a18:	8b 87       	std	Y+11, r24	; 0x0b
    1a1a:	9c 87       	std	Y+12, r25	; 0x0c
    1a1c:	ad 87       	std	Y+13, r26	; 0x0d
    1a1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	4a ef       	ldi	r20, 0xFA	; 250
    1a2e:	54 e4       	ldi	r21, 0x44	; 68
    1a30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	8f 83       	std	Y+7, r24	; 0x07
    1a3a:	98 87       	std	Y+8, r25	; 0x08
    1a3c:	a9 87       	std	Y+9, r26	; 0x09
    1a3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a40:	6f 81       	ldd	r22, Y+7	; 0x07
    1a42:	78 85       	ldd	r23, Y+8	; 0x08
    1a44:	89 85       	ldd	r24, Y+9	; 0x09
    1a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e8       	ldi	r20, 0x80	; 128
    1a4e:	5f e3       	ldi	r21, 0x3F	; 63
    1a50:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a54:	88 23       	and	r24, r24
    1a56:	2c f4       	brge	.+10     	; 0x1a62 <LCD_SendChar+0x37e>
		__ticks = 1;
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	9e 83       	std	Y+6, r25	; 0x06
    1a5e:	8d 83       	std	Y+5, r24	; 0x05
    1a60:	3f c0       	rjmp	.+126    	; 0x1ae0 <LCD_SendChar+0x3fc>
	else if (__tmp > 65535)
    1a62:	6f 81       	ldd	r22, Y+7	; 0x07
    1a64:	78 85       	ldd	r23, Y+8	; 0x08
    1a66:	89 85       	ldd	r24, Y+9	; 0x09
    1a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	3f ef       	ldi	r19, 0xFF	; 255
    1a6e:	4f e7       	ldi	r20, 0x7F	; 127
    1a70:	57 e4       	ldi	r21, 0x47	; 71
    1a72:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a76:	18 16       	cp	r1, r24
    1a78:	4c f5       	brge	.+82     	; 0x1acc <LCD_SendChar+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e2       	ldi	r20, 0x20	; 32
    1a88:	51 e4       	ldi	r21, 0x41	; 65
    1a8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	bc 01       	movw	r22, r24
    1a94:	cd 01       	movw	r24, r26
    1a96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	9e 83       	std	Y+6, r25	; 0x06
    1aa0:	8d 83       	std	Y+5, r24	; 0x05
    1aa2:	0f c0       	rjmp	.+30     	; 0x1ac2 <LCD_SendChar+0x3de>
    1aa4:	88 ec       	ldi	r24, 0xC8	; 200
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	9c 83       	std	Y+4, r25	; 0x04
    1aaa:	8b 83       	std	Y+3, r24	; 0x03
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <LCD_SendChar+0x3cc>
    1ab4:	9c 83       	std	Y+4, r25	; 0x04
    1ab6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aba:	9e 81       	ldd	r25, Y+6	; 0x06
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	9e 83       	std	Y+6, r25	; 0x06
    1ac0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	69 f7       	brne	.-38     	; 0x1aa4 <LCD_SendChar+0x3c0>
    1aca:	14 c0       	rjmp	.+40     	; 0x1af4 <LCD_SendChar+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1acc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ace:	78 85       	ldd	r23, Y+8	; 0x08
    1ad0:	89 85       	ldd	r24, Y+9	; 0x09
    1ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	9e 83       	std	Y+6, r25	; 0x06
    1ade:	8d 83       	std	Y+5, r24	; 0x05
    1ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae4:	9a 83       	std	Y+2, r25	; 0x02
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	9a 81       	ldd	r25, Y+2	; 0x02
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <LCD_SendChar+0x408>
    1af0:	9a 83       	std	Y+2, r25	; 0x02
    1af2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);

}
    1af4:	e9 96       	adiw	r28, 0x39	; 57
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <lcd_string>:

void lcd_string(char *str){
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <lcd_string+0x6>
    1b0c:	0f 92       	push	r0
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	9b 83       	std	Y+3, r25	; 0x03
    1b14:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t count=0;
    1b16:	19 82       	std	Y+1, r1	; 0x01
    1b18:	22 c0       	rjmp	.+68     	; 0x1b5e <lcd_string+0x58>
	while (*str!='\0')
	{
		count++;
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	8f 5f       	subi	r24, 0xFF	; 255
    1b1e:	89 83       	std	Y+1, r24	; 0x01
		LCD_SendChar(*str);
    1b20:	ea 81       	ldd	r30, Y+2	; 0x02
    1b22:	fb 81       	ldd	r31, Y+3	; 0x03
    1b24:	80 81       	ld	r24, Z
    1b26:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <LCD_SendChar>
		str++;
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b2e:	01 96       	adiw	r24, 0x01	; 1
    1b30:	9b 83       	std	Y+3, r25	; 0x03
    1b32:	8a 83       	std	Y+2, r24	; 0x02
		if (count == 16)
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	80 31       	cpi	r24, 0x10	; 16
    1b38:	29 f4       	brne	.+10     	; 0x1b44 <lcd_string+0x3e>
				{
			LCD_GotoXY(1,0);
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	60 e0       	ldi	r22, 0x00	; 0
    1b3e:	0e 94 e7 06 	call	0xdce	; 0xdce <LCD_GotoXY>
    1b42:	0d c0       	rjmp	.+26     	; 0x1b5e <lcd_string+0x58>
				}
				else if (count == 32 || count ==33)
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	80 32       	cpi	r24, 0x20	; 32
    1b48:	19 f0       	breq	.+6      	; 0x1b50 <lcd_string+0x4a>
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	81 32       	cpi	r24, 0x21	; 33
    1b4e:	39 f4       	brne	.+14     	; 0x1b5e <lcd_string+0x58>
				{
					LCD_Clear_screen();
    1b50:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_Clear_screen>
					LCD_GotoXY(0,0);
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	0e 94 e7 06 	call	0xdce	; 0xdce <LCD_GotoXY>
					count =0;
    1b5c:	19 82       	std	Y+1, r1	; 0x01

}

void lcd_string(char *str){
	uint8_t count=0;
	while (*str!='\0')
    1b5e:	ea 81       	ldd	r30, Y+2	; 0x02
    1b60:	fb 81       	ldd	r31, Y+3	; 0x03
    1b62:	80 81       	ld	r24, Z
    1b64:	88 23       	and	r24, r24
    1b66:	c9 f6       	brne	.-78     	; 0x1b1a <lcd_string+0x14>
					LCD_Clear_screen();
					LCD_GotoXY(0,0);
					count =0;
				}
	}
}
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <LCD_SendNumber>:


void LCD_SendNumber(sint32_t num)
{
    1b74:	0f 93       	push	r16
    1b76:	1f 93       	push	r17
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <LCD_SendNumber+0xa>
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <LCD_SendNumber+0xc>
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <LCD_SendNumber+0xe>
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	6b 83       	std	Y+3, r22	; 0x03
    1b88:	7c 83       	std	Y+4, r23	; 0x04
    1b8a:	8d 83       	std	Y+5, r24	; 0x05
    1b8c:	9e 83       	std	Y+6, r25	; 0x06
	    int reversed=1;
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	9a 83       	std	Y+2, r25	; 0x02
    1b94:	89 83       	std	Y+1, r24	; 0x01
		if(num < 0)
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9a:	ad 81       	ldd	r26, Y+5	; 0x05
    1b9c:	be 81       	ldd	r27, Y+6	; 0x06
    1b9e:	bb 23       	and	r27, r27
    1ba0:	94 f4       	brge	.+36     	; 0x1bc6 <LCD_SendNumber+0x52>
		{
			LCD_SendChar('-');
    1ba2:	8d e2       	ldi	r24, 0x2D	; 45
    1ba4:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <LCD_SendChar>
			num=-num;
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	ad 81       	ldd	r26, Y+5	; 0x05
    1bae:	be 81       	ldd	r27, Y+6	; 0x06
    1bb0:	b0 95       	com	r27
    1bb2:	a0 95       	com	r26
    1bb4:	90 95       	com	r25
    1bb6:	81 95       	neg	r24
    1bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bba:	af 4f       	sbci	r26, 0xFF	; 255
    1bbc:	bf 4f       	sbci	r27, 0xFF	; 255
    1bbe:	8b 83       	std	Y+3, r24	; 0x03
    1bc0:	9c 83       	std	Y+4, r25	; 0x04
    1bc2:	ad 83       	std	Y+5, r26	; 0x05
    1bc4:	be 83       	std	Y+6, r27	; 0x06
		}

		if (num == 0)
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bca:	ad 81       	ldd	r26, Y+5	; 0x05
    1bcc:	be 81       	ldd	r27, Y+6	; 0x06
    1bce:	00 97       	sbiw	r24, 0x00	; 0
    1bd0:	a1 05       	cpc	r26, r1
    1bd2:	b1 05       	cpc	r27, r1
    1bd4:	a9 f5       	brne	.+106    	; 0x1c40 <LCD_SendNumber+0xcc>
			{
			LCD_SendChar('0');
    1bd6:	80 e3       	ldi	r24, 0x30	; 48
    1bd8:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <LCD_SendChar>
    1bdc:	31 c0       	rjmp	.+98     	; 0x1c40 <LCD_SendNumber+0xcc>
			}
		while(num !=0)
		{
			reversed = (reversed*10) + (num %10);
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	9a 81       	ldd	r25, Y+2	; 0x02
    1be2:	9c 01       	movw	r18, r24
    1be4:	22 0f       	add	r18, r18
    1be6:	33 1f       	adc	r19, r19
    1be8:	c9 01       	movw	r24, r18
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	88 0f       	add	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	82 0f       	add	r24, r18
    1bf4:	93 1f       	adc	r25, r19
    1bf6:	8c 01       	movw	r16, r24
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfc:	ad 81       	ldd	r26, Y+5	; 0x05
    1bfe:	be 81       	ldd	r27, Y+6	; 0x06
    1c00:	2a e0       	ldi	r18, 0x0A	; 10
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e0       	ldi	r20, 0x00	; 0
    1c06:	50 e0       	ldi	r21, 0x00	; 0
    1c08:	bc 01       	movw	r22, r24
    1c0a:	cd 01       	movw	r24, r26
    1c0c:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <__divmodsi4>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	80 0f       	add	r24, r16
    1c16:	91 1f       	adc	r25, r17
    1c18:	9a 83       	std	Y+2, r25	; 0x02
    1c1a:	89 83       	std	Y+1, r24	; 0x01
			num/=10;
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c20:	ad 81       	ldd	r26, Y+5	; 0x05
    1c22:	be 81       	ldd	r27, Y+6	; 0x06
    1c24:	2a e0       	ldi	r18, 0x0A	; 10
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e0       	ldi	r20, 0x00	; 0
    1c2a:	50 e0       	ldi	r21, 0x00	; 0
    1c2c:	bc 01       	movw	r22, r24
    1c2e:	cd 01       	movw	r24, r26
    1c30:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <__divmodsi4>
    1c34:	da 01       	movw	r26, r20
    1c36:	c9 01       	movw	r24, r18
    1c38:	8b 83       	std	Y+3, r24	; 0x03
    1c3a:	9c 83       	std	Y+4, r25	; 0x04
    1c3c:	ad 83       	std	Y+5, r26	; 0x05
    1c3e:	be 83       	std	Y+6, r27	; 0x06

		if (num == 0)
			{
			LCD_SendChar('0');
			}
		while(num !=0)
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	9c 81       	ldd	r25, Y+4	; 0x04
    1c44:	ad 81       	ldd	r26, Y+5	; 0x05
    1c46:	be 81       	ldd	r27, Y+6	; 0x06
    1c48:	00 97       	sbiw	r24, 0x00	; 0
    1c4a:	a1 05       	cpc	r26, r1
    1c4c:	b1 05       	cpc	r27, r1
    1c4e:	39 f6       	brne	.-114    	; 0x1bde <LCD_SendNumber+0x6a>
    1c50:	14 c0       	rjmp	.+40     	; 0x1c7a <LCD_SendNumber+0x106>
			reversed = (reversed*10) + (num %10);
			num/=10;
		}
		while(reversed!=1)
		{
			LCD_SendChar(((reversed%10 )+ '0'));
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	9a 81       	ldd	r25, Y+2	; 0x02
    1c56:	2a e0       	ldi	r18, 0x0A	; 10
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	b9 01       	movw	r22, r18
    1c5c:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__divmodhi4>
    1c60:	80 5d       	subi	r24, 0xD0	; 208
    1c62:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <LCD_SendChar>
		    reversed /=10;
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6a:	2a e0       	ldi	r18, 0x0A	; 10
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	b9 01       	movw	r22, r18
    1c70:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__divmodhi4>
    1c74:	cb 01       	movw	r24, r22
    1c76:	9a 83       	std	Y+2, r25	; 0x02
    1c78:	89 83       	std	Y+1, r24	; 0x01
		while(num !=0)
		{
			reversed = (reversed*10) + (num %10);
			num/=10;
		}
		while(reversed!=1)
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	91 05       	cpc	r25, r1
    1c82:	39 f7       	brne	.-50     	; 0x1c52 <LCD_SendNumber+0xde>
		{
			LCD_SendChar(((reversed%10 )+ '0'));
		    reversed /=10;
		}
}
    1c84:	26 96       	adiw	r28, 0x06	; 6
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	1f 91       	pop	r17
    1c96:	0f 91       	pop	r16
    1c98:	08 95       	ret

00001c9a <Delay>:



void Delay(uint32_t delay)
{
    1c9a:	df 93       	push	r29
    1c9c:	cf 93       	push	r28
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	28 97       	sbiw	r28, 0x08	; 8
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	6d 83       	std	Y+5, r22	; 0x05
    1cb0:	7e 83       	std	Y+6, r23	; 0x06
    1cb2:	8f 83       	std	Y+7, r24	; 0x07
    1cb4:	98 87       	std	Y+8, r25	; 0x08
	uint32_t i =0;
    1cb6:	19 82       	std	Y+1, r1	; 0x01
    1cb8:	1a 82       	std	Y+2, r1	; 0x02
    1cba:	1b 82       	std	Y+3, r1	; 0x03
    1cbc:	1c 82       	std	Y+4, r1	; 0x04
	for ( i =0 ; i < delay ; i++)
    1cbe:	19 82       	std	Y+1, r1	; 0x01
    1cc0:	1a 82       	std	Y+2, r1	; 0x02
    1cc2:	1b 82       	std	Y+3, r1	; 0x03
    1cc4:	1c 82       	std	Y+4, r1	; 0x04
    1cc6:	0c c0       	rjmp	.+24     	; 0x1ce0 <Delay+0x46>
	{
		asm volatile ("NOP");
    1cc8:	00 00       	nop


void Delay(uint32_t delay)
{
	uint32_t i =0;
	for ( i =0 ; i < delay ; i++)
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cce:	ab 81       	ldd	r26, Y+3	; 0x03
    1cd0:	bc 81       	ldd	r27, Y+4	; 0x04
    1cd2:	01 96       	adiw	r24, 0x01	; 1
    1cd4:	a1 1d       	adc	r26, r1
    1cd6:	b1 1d       	adc	r27, r1
    1cd8:	89 83       	std	Y+1, r24	; 0x01
    1cda:	9a 83       	std	Y+2, r25	; 0x02
    1cdc:	ab 83       	std	Y+3, r26	; 0x03
    1cde:	bc 83       	std	Y+4, r27	; 0x04
    1ce0:	29 81       	ldd	r18, Y+1	; 0x01
    1ce2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ce4:	4b 81       	ldd	r20, Y+3	; 0x03
    1ce6:	5c 81       	ldd	r21, Y+4	; 0x04
    1ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cea:	9e 81       	ldd	r25, Y+6	; 0x06
    1cec:	af 81       	ldd	r26, Y+7	; 0x07
    1cee:	b8 85       	ldd	r27, Y+8	; 0x08
    1cf0:	28 17       	cp	r18, r24
    1cf2:	39 07       	cpc	r19, r25
    1cf4:	4a 07       	cpc	r20, r26
    1cf6:	5b 07       	cpc	r21, r27
    1cf8:	38 f3       	brcs	.-50     	; 0x1cc8 <Delay+0x2e>
	{
		asm volatile ("NOP");
	}
}
    1cfa:	28 96       	adiw	r28, 0x08	; 8
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <LCD_Clear_screen>:


void LCD_Clear_screen()
{
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	6c 97       	sbiw	r28, 0x1c	; 28
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand(0x01);
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SendCommand>
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	a0 e0       	ldi	r26, 0x00	; 0
    1d2c:	b0 e4       	ldi	r27, 0x40	; 64
    1d2e:	89 8f       	std	Y+25, r24	; 0x19
    1d30:	9a 8f       	std	Y+26, r25	; 0x1a
    1d32:	ab 8f       	std	Y+27, r26	; 0x1b
    1d34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d36:	69 8d       	ldd	r22, Y+25	; 0x19
    1d38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	4a ef       	ldi	r20, 0xFA	; 250
    1d44:	54 e4       	ldi	r21, 0x44	; 68
    1d46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	8d 8b       	std	Y+21, r24	; 0x15
    1d50:	9e 8b       	std	Y+22, r25	; 0x16
    1d52:	af 8b       	std	Y+23, r26	; 0x17
    1d54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d56:	6d 89       	ldd	r22, Y+21	; 0x15
    1d58:	7e 89       	ldd	r23, Y+22	; 0x16
    1d5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e8       	ldi	r20, 0x80	; 128
    1d64:	5f e3       	ldi	r21, 0x3F	; 63
    1d66:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d6a:	88 23       	and	r24, r24
    1d6c:	2c f4       	brge	.+10     	; 0x1d78 <LCD_Clear_screen+0x6c>
		__ticks = 1;
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	9c 8b       	std	Y+20, r25	; 0x14
    1d74:	8b 8b       	std	Y+19, r24	; 0x13
    1d76:	3f c0       	rjmp	.+126    	; 0x1df6 <LCD_Clear_screen+0xea>
	else if (__tmp > 65535)
    1d78:	6d 89       	ldd	r22, Y+21	; 0x15
    1d7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	3f ef       	ldi	r19, 0xFF	; 255
    1d84:	4f e7       	ldi	r20, 0x7F	; 127
    1d86:	57 e4       	ldi	r21, 0x47	; 71
    1d88:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d8c:	18 16       	cp	r1, r24
    1d8e:	4c f5       	brge	.+82     	; 0x1de2 <LCD_Clear_screen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d90:	69 8d       	ldd	r22, Y+25	; 0x19
    1d92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	40 e2       	ldi	r20, 0x20	; 32
    1d9e:	51 e4       	ldi	r21, 0x41	; 65
    1da0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	bc 01       	movw	r22, r24
    1daa:	cd 01       	movw	r24, r26
    1dac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	9c 8b       	std	Y+20, r25	; 0x14
    1db6:	8b 8b       	std	Y+19, r24	; 0x13
    1db8:	0f c0       	rjmp	.+30     	; 0x1dd8 <LCD_Clear_screen+0xcc>
    1dba:	88 ec       	ldi	r24, 0xC8	; 200
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	9a 8b       	std	Y+18, r25	; 0x12
    1dc0:	89 8b       	std	Y+17, r24	; 0x11
    1dc2:	89 89       	ldd	r24, Y+17	; 0x11
    1dc4:	9a 89       	ldd	r25, Y+18	; 0x12
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	f1 f7       	brne	.-4      	; 0x1dc6 <LCD_Clear_screen+0xba>
    1dca:	9a 8b       	std	Y+18, r25	; 0x12
    1dcc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dce:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	9c 8b       	std	Y+20, r25	; 0x14
    1dd6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dda:	9c 89       	ldd	r25, Y+20	; 0x14
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	69 f7       	brne	.-38     	; 0x1dba <LCD_Clear_screen+0xae>
    1de0:	14 c0       	rjmp	.+40     	; 0x1e0a <LCD_Clear_screen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de2:	6d 89       	ldd	r22, Y+21	; 0x15
    1de4:	7e 89       	ldd	r23, Y+22	; 0x16
    1de6:	8f 89       	ldd	r24, Y+23	; 0x17
    1de8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	9c 8b       	std	Y+20, r25	; 0x14
    1df4:	8b 8b       	std	Y+19, r24	; 0x13
    1df6:	8b 89       	ldd	r24, Y+19	; 0x13
    1df8:	9c 89       	ldd	r25, Y+20	; 0x14
    1dfa:	98 8b       	std	Y+16, r25	; 0x10
    1dfc:	8f 87       	std	Y+15, r24	; 0x0f
    1dfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e00:	98 89       	ldd	r25, Y+16	; 0x10
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <LCD_Clear_screen+0xf6>
    1e06:	98 8b       	std	Y+16, r25	; 0x10
    1e08:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_SendCommand(0x80);
    1e0a:	80 e8       	ldi	r24, 0x80	; 128
    1e0c:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SendCommand>
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	a0 e0       	ldi	r26, 0x00	; 0
    1e16:	b0 e4       	ldi	r27, 0x40	; 64
    1e18:	8b 87       	std	Y+11, r24	; 0x0b
    1e1a:	9c 87       	std	Y+12, r25	; 0x0c
    1e1c:	ad 87       	std	Y+13, r26	; 0x0d
    1e1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	4a ef       	ldi	r20, 0xFA	; 250
    1e2e:	54 e4       	ldi	r21, 0x44	; 68
    1e30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	8f 83       	std	Y+7, r24	; 0x07
    1e3a:	98 87       	std	Y+8, r25	; 0x08
    1e3c:	a9 87       	std	Y+9, r26	; 0x09
    1e3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e40:	6f 81       	ldd	r22, Y+7	; 0x07
    1e42:	78 85       	ldd	r23, Y+8	; 0x08
    1e44:	89 85       	ldd	r24, Y+9	; 0x09
    1e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e8       	ldi	r20, 0x80	; 128
    1e4e:	5f e3       	ldi	r21, 0x3F	; 63
    1e50:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e54:	88 23       	and	r24, r24
    1e56:	2c f4       	brge	.+10     	; 0x1e62 <LCD_Clear_screen+0x156>
		__ticks = 1;
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	9e 83       	std	Y+6, r25	; 0x06
    1e5e:	8d 83       	std	Y+5, r24	; 0x05
    1e60:	3f c0       	rjmp	.+126    	; 0x1ee0 <LCD_Clear_screen+0x1d4>
	else if (__tmp > 65535)
    1e62:	6f 81       	ldd	r22, Y+7	; 0x07
    1e64:	78 85       	ldd	r23, Y+8	; 0x08
    1e66:	89 85       	ldd	r24, Y+9	; 0x09
    1e68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	3f ef       	ldi	r19, 0xFF	; 255
    1e6e:	4f e7       	ldi	r20, 0x7F	; 127
    1e70:	57 e4       	ldi	r21, 0x47	; 71
    1e72:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e76:	18 16       	cp	r1, r24
    1e78:	4c f5       	brge	.+82     	; 0x1ecc <LCD_Clear_screen+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e2       	ldi	r20, 0x20	; 32
    1e88:	51 e4       	ldi	r21, 0x41	; 65
    1e8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	bc 01       	movw	r22, r24
    1e94:	cd 01       	movw	r24, r26
    1e96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9e 83       	std	Y+6, r25	; 0x06
    1ea0:	8d 83       	std	Y+5, r24	; 0x05
    1ea2:	0f c0       	rjmp	.+30     	; 0x1ec2 <LCD_Clear_screen+0x1b6>
    1ea4:	88 ec       	ldi	r24, 0xC8	; 200
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9c 83       	std	Y+4, r25	; 0x04
    1eaa:	8b 83       	std	Y+3, r24	; 0x03
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <LCD_Clear_screen+0x1a4>
    1eb4:	9c 83       	std	Y+4, r25	; 0x04
    1eb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eba:	9e 81       	ldd	r25, Y+6	; 0x06
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	9e 83       	std	Y+6, r25	; 0x06
    1ec0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	69 f7       	brne	.-38     	; 0x1ea4 <LCD_Clear_screen+0x198>
    1eca:	14 c0       	rjmp	.+40     	; 0x1ef4 <LCD_Clear_screen+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ece:	78 85       	ldd	r23, Y+8	; 0x08
    1ed0:	89 85       	ldd	r24, Y+9	; 0x09
    1ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	9e 83       	std	Y+6, r25	; 0x06
    1ede:	8d 83       	std	Y+5, r24	; 0x05
    1ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee4:	9a 83       	std	Y+2, r25	; 0x02
    1ee6:	89 83       	std	Y+1, r24	; 0x01
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	9a 81       	ldd	r25, Y+2	; 0x02
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	f1 f7       	brne	.-4      	; 0x1eec <LCD_Clear_screen+0x1e0>
    1ef0:	9a 83       	std	Y+2, r25	; 0x02
    1ef2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1ef4:	6c 96       	adiw	r28, 0x1c	; 28
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <KEYPAD_init>:




void KEYPAD_init()
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
		DIO_SetPinDircection(KPD_PORT,KPD_column1,OUTPUT);
    1f0e:	83 e0       	ldi	r24, 0x03	; 3
    1f10:	62 e0       	ldi	r22, 0x02	; 2
    1f12:	41 e0       	ldi	r20, 0x01	; 1
    1f14:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <DIO_SetPinDircection>
		DIO_SetPinDircection(KPD_PORT,KPD_column2,OUTPUT);
    1f18:	83 e0       	ldi	r24, 0x03	; 3
    1f1a:	63 e0       	ldi	r22, 0x03	; 3
    1f1c:	41 e0       	ldi	r20, 0x01	; 1
    1f1e:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <DIO_SetPinDircection>
		DIO_SetPinDircection(KPD_PORT,KPD_column3,OUTPUT);
    1f22:	83 e0       	ldi	r24, 0x03	; 3
    1f24:	64 e0       	ldi	r22, 0x04	; 4
    1f26:	41 e0       	ldi	r20, 0x01	; 1
    1f28:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <DIO_SetPinDircection>

		DIO_SetPinValue(KPD_PORT,KPD_column1,HIGH);
    1f2c:	83 e0       	ldi	r24, 0x03	; 3
    1f2e:	62 e0       	ldi	r22, 0x02	; 2
    1f30:	41 e0       	ldi	r20, 0x01	; 1
    1f32:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_SetPinValue>
		DIO_SetPinValue(KPD_PORT,KPD_column2,HIGH);
    1f36:	83 e0       	ldi	r24, 0x03	; 3
    1f38:	63 e0       	ldi	r22, 0x03	; 3
    1f3a:	41 e0       	ldi	r20, 0x01	; 1
    1f3c:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_SetPinValue>
		DIO_SetPinValue(KPD_PORT,KPD_column3,HIGH);
    1f40:	83 e0       	ldi	r24, 0x03	; 3
    1f42:	64 e0       	ldi	r22, 0x04	; 4
    1f44:	41 e0       	ldi	r20, 0x01	; 1
    1f46:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_SetPinValue>


		DIO_SetPinDircection(KPD_PORT,KPD_row1,INPUT_PULLUP);
    1f4a:	83 e0       	ldi	r24, 0x03	; 3
    1f4c:	65 e0       	ldi	r22, 0x05	; 5
    1f4e:	42 e0       	ldi	r20, 0x02	; 2
    1f50:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <DIO_SetPinDircection>
		DIO_SetPinDircection(KPD_PORT,KPD_row2,INPUT_PULLUP);
    1f54:	83 e0       	ldi	r24, 0x03	; 3
    1f56:	66 e0       	ldi	r22, 0x06	; 6
    1f58:	42 e0       	ldi	r20, 0x02	; 2
    1f5a:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <DIO_SetPinDircection>
		DIO_SetPinDircection(KPD_PORT,KPD_row3,INPUT_PULLUP);
    1f5e:	83 e0       	ldi	r24, 0x03	; 3
    1f60:	67 e0       	ldi	r22, 0x07	; 7
    1f62:	42 e0       	ldi	r20, 0x02	; 2
    1f64:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <DIO_SetPinDircection>
}
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <KEYPAD_GetNum>:



uint8_t KEYPAD_GetNum()
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	a7 97       	sbiw	r28, 0x27	; 39
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61

	uint8_t value = KPD_NOT_PRESSED, pin_check=0;
    1f82:	8f ef       	ldi	r24, 0xFF	; 255
    1f84:	8f 83       	std	Y+7, r24	; 0x07
    1f86:	18 86       	std	Y+8, r1	; 0x08
	uint8_t KPD_NUM[COL_NUM][ROW_NUM]={{1,2,3},{4,5,6},{7,8,9}};
    1f88:	ce 01       	movw	r24, r28
    1f8a:	09 96       	adiw	r24, 0x09	; 9
    1f8c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f8e:	89 8f       	std	Y+25, r24	; 0x19
    1f90:	ee e7       	ldi	r30, 0x7E	; 126
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	fc 8f       	std	Y+28, r31	; 0x1c
    1f96:	eb 8f       	std	Y+27, r30	; 0x1b
    1f98:	f9 e0       	ldi	r31, 0x09	; 9
    1f9a:	fd 8f       	std	Y+29, r31	; 0x1d
    1f9c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1f9e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1fa0:	00 80       	ld	r0, Z
    1fa2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fa4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fa6:	01 96       	adiw	r24, 0x01	; 1
    1fa8:	9c 8f       	std	Y+28, r25	; 0x1c
    1faa:	8b 8f       	std	Y+27, r24	; 0x1b
    1fac:	e9 8d       	ldd	r30, Y+25	; 0x19
    1fae:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1fb0:	00 82       	st	Z, r0
    1fb2:	89 8d       	ldd	r24, Y+25	; 0x19
    1fb4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1fb6:	01 96       	adiw	r24, 0x01	; 1
    1fb8:	9a 8f       	std	Y+26, r25	; 0x1a
    1fba:	89 8f       	std	Y+25, r24	; 0x19
    1fbc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fbe:	91 50       	subi	r25, 0x01	; 1
    1fc0:	9d 8f       	std	Y+29, r25	; 0x1d
    1fc2:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1fc4:	ee 23       	and	r30, r30
    1fc6:	51 f7       	brne	.-44     	; 0x1f9c <KEYPAD_GetNum+0x2e>
	uint8_t KPD_COLUMNS[]={KPD_column1 ,KPD_column2, KPD_column3};
    1fc8:	ce 01       	movw	r24, r28
    1fca:	42 96       	adiw	r24, 0x12	; 18
    1fcc:	9f 8f       	std	Y+31, r25	; 0x1f
    1fce:	8e 8f       	std	Y+30, r24	; 0x1e
    1fd0:	eb e7       	ldi	r30, 0x7B	; 123
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	f9 a3       	std	Y+33, r31	; 0x21
    1fd6:	e8 a3       	std	Y+32, r30	; 0x20
    1fd8:	f3 e0       	ldi	r31, 0x03	; 3
    1fda:	fa a3       	std	Y+34, r31	; 0x22
    1fdc:	e8 a1       	ldd	r30, Y+32	; 0x20
    1fde:	f9 a1       	ldd	r31, Y+33	; 0x21
    1fe0:	00 80       	ld	r0, Z
    1fe2:	88 a1       	ldd	r24, Y+32	; 0x20
    1fe4:	99 a1       	ldd	r25, Y+33	; 0x21
    1fe6:	01 96       	adiw	r24, 0x01	; 1
    1fe8:	99 a3       	std	Y+33, r25	; 0x21
    1fea:	88 a3       	std	Y+32, r24	; 0x20
    1fec:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1fee:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1ff0:	00 82       	st	Z, r0
    1ff2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ff4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ff6:	01 96       	adiw	r24, 0x01	; 1
    1ff8:	9f 8f       	std	Y+31, r25	; 0x1f
    1ffa:	8e 8f       	std	Y+30, r24	; 0x1e
    1ffc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ffe:	91 50       	subi	r25, 0x01	; 1
    2000:	9a a3       	std	Y+34, r25	; 0x22
    2002:	ea a1       	ldd	r30, Y+34	; 0x22
    2004:	ee 23       	and	r30, r30
    2006:	51 f7       	brne	.-44     	; 0x1fdc <KEYPAD_GetNum+0x6e>
	uint8_t KPD_ROWS[]={KPD_row1 ,KPD_row2, KPD_row3};
    2008:	ce 01       	movw	r24, r28
    200a:	45 96       	adiw	r24, 0x15	; 21
    200c:	9c a3       	std	Y+36, r25	; 0x24
    200e:	8b a3       	std	Y+35, r24	; 0x23
    2010:	e8 e7       	ldi	r30, 0x78	; 120
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	fe a3       	std	Y+38, r31	; 0x26
    2016:	ed a3       	std	Y+37, r30	; 0x25
    2018:	f3 e0       	ldi	r31, 0x03	; 3
    201a:	ff a3       	std	Y+39, r31	; 0x27
    201c:	ed a1       	ldd	r30, Y+37	; 0x25
    201e:	fe a1       	ldd	r31, Y+38	; 0x26
    2020:	00 80       	ld	r0, Z
    2022:	8d a1       	ldd	r24, Y+37	; 0x25
    2024:	9e a1       	ldd	r25, Y+38	; 0x26
    2026:	01 96       	adiw	r24, 0x01	; 1
    2028:	9e a3       	std	Y+38, r25	; 0x26
    202a:	8d a3       	std	Y+37, r24	; 0x25
    202c:	eb a1       	ldd	r30, Y+35	; 0x23
    202e:	fc a1       	ldd	r31, Y+36	; 0x24
    2030:	00 82       	st	Z, r0
    2032:	8b a1       	ldd	r24, Y+35	; 0x23
    2034:	9c a1       	ldd	r25, Y+36	; 0x24
    2036:	01 96       	adiw	r24, 0x01	; 1
    2038:	9c a3       	std	Y+36, r25	; 0x24
    203a:	8b a3       	std	Y+35, r24	; 0x23
    203c:	9f a1       	ldd	r25, Y+39	; 0x27
    203e:	91 50       	subi	r25, 0x01	; 1
    2040:	9f a3       	std	Y+39, r25	; 0x27
    2042:	ef a1       	ldd	r30, Y+39	; 0x27
    2044:	ee 23       	and	r30, r30
    2046:	51 f7       	brne	.-44     	; 0x201c <KEYPAD_GetNum+0xae>
	uint8_t col,row;

	for(col=0;col<COL_NUM;col++)
    2048:	1e 82       	std	Y+6, r1	; 0x06
    204a:	95 c0       	rjmp	.+298    	; 0x2176 <KEYPAD_GetNum+0x208>
	{
		DIO_SetPinValue(KPD_PORT,KPD_COLUMNS[col],LOW);
    204c:	8e 81       	ldd	r24, Y+6	; 0x06
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	ce 01       	movw	r24, r28
    2054:	42 96       	adiw	r24, 0x12	; 18
    2056:	fc 01       	movw	r30, r24
    2058:	e2 0f       	add	r30, r18
    205a:	f3 1f       	adc	r31, r19
    205c:	90 81       	ld	r25, Z
    205e:	83 e0       	ldi	r24, 0x03	; 3
    2060:	69 2f       	mov	r22, r25
    2062:	40 e0       	ldi	r20, 0x00	; 0
    2064:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_SetPinValue>
		for(row=0;row<ROW_NUM;row++){
    2068:	1d 82       	std	Y+5, r1	; 0x05
    206a:	70 c0       	rjmp	.+224    	; 0x214c <KEYPAD_GetNum+0x1de>

			DIO_GetPinVal(KPD_PORT,KPD_ROWS[row],&pin_check);
    206c:	8d 81       	ldd	r24, Y+5	; 0x05
    206e:	28 2f       	mov	r18, r24
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	ce 01       	movw	r24, r28
    2074:	45 96       	adiw	r24, 0x15	; 21
    2076:	fc 01       	movw	r30, r24
    2078:	e2 0f       	add	r30, r18
    207a:	f3 1f       	adc	r31, r19
    207c:	90 81       	ld	r25, Z
    207e:	9e 01       	movw	r18, r28
    2080:	28 5f       	subi	r18, 0xF8	; 248
    2082:	3f 4f       	sbci	r19, 0xFF	; 255
    2084:	83 e0       	ldi	r24, 0x03	; 3
    2086:	69 2f       	mov	r22, r25
    2088:	a9 01       	movw	r20, r18
    208a:	0e 94 c5 14 	call	0x298a	; 0x298a <DIO_GetPinVal>

			if(pin_check == LOW)
    208e:	88 85       	ldd	r24, Y+8	; 0x08
    2090:	88 23       	and	r24, r24
    2092:	09 f0       	breq	.+2      	; 0x2096 <KEYPAD_GetNum+0x128>
    2094:	58 c0       	rjmp	.+176    	; 0x2146 <KEYPAD_GetNum+0x1d8>
			{
				value = KPD_NUM[col][row];
    2096:	8e 81       	ldd	r24, Y+6	; 0x06
    2098:	28 2f       	mov	r18, r24
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	8d 81       	ldd	r24, Y+5	; 0x05
    209e:	48 2f       	mov	r20, r24
    20a0:	50 e0       	ldi	r21, 0x00	; 0
    20a2:	c9 01       	movw	r24, r18
    20a4:	88 0f       	add	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	82 0f       	add	r24, r18
    20aa:	93 1f       	adc	r25, r19
    20ac:	9e 01       	movw	r18, r28
    20ae:	2f 5f       	subi	r18, 0xFF	; 255
    20b0:	3f 4f       	sbci	r19, 0xFF	; 255
    20b2:	82 0f       	add	r24, r18
    20b4:	93 1f       	adc	r25, r19
    20b6:	84 0f       	add	r24, r20
    20b8:	95 1f       	adc	r25, r21
    20ba:	fc 01       	movw	r30, r24
    20bc:	38 96       	adiw	r30, 0x08	; 8
    20be:	80 81       	ld	r24, Z
    20c0:	8f 83       	std	Y+7, r24	; 0x07
				for(uint32_t delay=0 ; delay <DELAY_TIME;delay++);
    20c2:	19 82       	std	Y+1, r1	; 0x01
    20c4:	1a 82       	std	Y+2, r1	; 0x02
    20c6:	1b 82       	std	Y+3, r1	; 0x03
    20c8:	1c 82       	std	Y+4, r1	; 0x04
    20ca:	0b c0       	rjmp	.+22     	; 0x20e2 <KEYPAD_GetNum+0x174>
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	9a 81       	ldd	r25, Y+2	; 0x02
    20d0:	ab 81       	ldd	r26, Y+3	; 0x03
    20d2:	bc 81       	ldd	r27, Y+4	; 0x04
    20d4:	01 96       	adiw	r24, 0x01	; 1
    20d6:	a1 1d       	adc	r26, r1
    20d8:	b1 1d       	adc	r27, r1
    20da:	89 83       	std	Y+1, r24	; 0x01
    20dc:	9a 83       	std	Y+2, r25	; 0x02
    20de:	ab 83       	std	Y+3, r26	; 0x03
    20e0:	bc 83       	std	Y+4, r27	; 0x04
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	9a 81       	ldd	r25, Y+2	; 0x02
    20e6:	ab 81       	ldd	r26, Y+3	; 0x03
    20e8:	bc 81       	ldd	r27, Y+4	; 0x04
    20ea:	80 35       	cpi	r24, 0x50	; 80
    20ec:	f3 ec       	ldi	r31, 0xC3	; 195
    20ee:	9f 07       	cpc	r25, r31
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	af 07       	cpc	r26, r31
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	bf 07       	cpc	r27, r31
    20f8:	48 f3       	brcs	.-46     	; 0x20cc <KEYPAD_GetNum+0x15e>
    20fa:	11 c0       	rjmp	.+34     	; 0x211e <KEYPAD_GetNum+0x1b0>
				while(pin_check == LOW)
				{
					DIO_GetPinVal(KPD_PORT,KPD_ROWS[row],&pin_check);
    20fc:	8d 81       	ldd	r24, Y+5	; 0x05
    20fe:	28 2f       	mov	r18, r24
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	ce 01       	movw	r24, r28
    2104:	45 96       	adiw	r24, 0x15	; 21
    2106:	fc 01       	movw	r30, r24
    2108:	e2 0f       	add	r30, r18
    210a:	f3 1f       	adc	r31, r19
    210c:	90 81       	ld	r25, Z
    210e:	9e 01       	movw	r18, r28
    2110:	28 5f       	subi	r18, 0xF8	; 248
    2112:	3f 4f       	sbci	r19, 0xFF	; 255
    2114:	83 e0       	ldi	r24, 0x03	; 3
    2116:	69 2f       	mov	r22, r25
    2118:	a9 01       	movw	r20, r18
    211a:	0e 94 c5 14 	call	0x298a	; 0x298a <DIO_GetPinVal>

			if(pin_check == LOW)
			{
				value = KPD_NUM[col][row];
				for(uint32_t delay=0 ; delay <DELAY_TIME;delay++);
				while(pin_check == LOW)
    211e:	88 85       	ldd	r24, Y+8	; 0x08
    2120:	88 23       	and	r24, r24
    2122:	61 f3       	breq	.-40     	; 0x20fc <KEYPAD_GetNum+0x18e>
				{
					DIO_GetPinVal(KPD_PORT,KPD_ROWS[row],&pin_check);
				}
				DIO_SetPinValue(KPD_PORT,KPD_COLUMNS[row],HIGH);
    2124:	8d 81       	ldd	r24, Y+5	; 0x05
    2126:	28 2f       	mov	r18, r24
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	ce 01       	movw	r24, r28
    212c:	42 96       	adiw	r24, 0x12	; 18
    212e:	fc 01       	movw	r30, r24
    2130:	e2 0f       	add	r30, r18
    2132:	f3 1f       	adc	r31, r19
    2134:	90 81       	ld	r25, Z
    2136:	83 e0       	ldi	r24, 0x03	; 3
    2138:	69 2f       	mov	r22, r25
    213a:	41 e0       	ldi	r20, 0x01	; 1
    213c:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_SetPinValue>

				return value;
    2140:	2f 81       	ldd	r18, Y+7	; 0x07
    2142:	28 8f       	std	Y+24, r18	; 0x18
    2144:	1e c0       	rjmp	.+60     	; 0x2182 <KEYPAD_GetNum+0x214>
	uint8_t col,row;

	for(col=0;col<COL_NUM;col++)
	{
		DIO_SetPinValue(KPD_PORT,KPD_COLUMNS[col],LOW);
		for(row=0;row<ROW_NUM;row++){
    2146:	8d 81       	ldd	r24, Y+5	; 0x05
    2148:	8f 5f       	subi	r24, 0xFF	; 255
    214a:	8d 83       	std	Y+5, r24	; 0x05
    214c:	8d 81       	ldd	r24, Y+5	; 0x05
    214e:	83 30       	cpi	r24, 0x03	; 3
    2150:	08 f4       	brcc	.+2      	; 0x2154 <KEYPAD_GetNum+0x1e6>
    2152:	8c cf       	rjmp	.-232    	; 0x206c <KEYPAD_GetNum+0xfe>

				return value;
			}

		}
		DIO_SetPinValue(KPD_PORT,KPD_COLUMNS[col],HIGH);
    2154:	8e 81       	ldd	r24, Y+6	; 0x06
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	ce 01       	movw	r24, r28
    215c:	42 96       	adiw	r24, 0x12	; 18
    215e:	fc 01       	movw	r30, r24
    2160:	e2 0f       	add	r30, r18
    2162:	f3 1f       	adc	r31, r19
    2164:	90 81       	ld	r25, Z
    2166:	83 e0       	ldi	r24, 0x03	; 3
    2168:	69 2f       	mov	r22, r25
    216a:	41 e0       	ldi	r20, 0x01	; 1
    216c:	0e 94 54 13 	call	0x26a8	; 0x26a8 <DIO_SetPinValue>
	uint8_t KPD_NUM[COL_NUM][ROW_NUM]={{1,2,3},{4,5,6},{7,8,9}};
	uint8_t KPD_COLUMNS[]={KPD_column1 ,KPD_column2, KPD_column3};
	uint8_t KPD_ROWS[]={KPD_row1 ,KPD_row2, KPD_row3};
	uint8_t col,row;

	for(col=0;col<COL_NUM;col++)
    2170:	8e 81       	ldd	r24, Y+6	; 0x06
    2172:	8f 5f       	subi	r24, 0xFF	; 255
    2174:	8e 83       	std	Y+6, r24	; 0x06
    2176:	8e 81       	ldd	r24, Y+6	; 0x06
    2178:	83 30       	cpi	r24, 0x03	; 3
    217a:	08 f4       	brcc	.+2      	; 0x217e <KEYPAD_GetNum+0x210>
    217c:	67 cf       	rjmp	.-306    	; 0x204c <KEYPAD_GetNum+0xde>

		}
		DIO_SetPinValue(KPD_PORT,KPD_COLUMNS[col],HIGH);
	}

	return value;
    217e:	8f 81       	ldd	r24, Y+7	; 0x07
    2180:	88 8f       	std	Y+24, r24	; 0x18
    2182:	88 8d       	ldd	r24, Y+24	; 0x18
}
    2184:	a7 96       	adiw	r28, 0x27	; 39
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	cd bf       	out	0x3d, r28	; 61
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <GlobalInerruptEnable>:
#include "Interrupt_interface.h"
#include "Interrupt_private.h"
#include "Interrupt_config.h"

void GlobalInerruptEnable(void)
{
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    219e:	af e5       	ldi	r26, 0x5F	; 95
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	ef e5       	ldi	r30, 0x5F	; 95
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	80 68       	ori	r24, 0x80	; 128
    21aa:	8c 93       	st	X, r24
}
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <DIO_SetPinDircection>:
 * Set Pin direction from any port
 * INPUT : PORT name , PIN number , (OUTPUT or INPUT)
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_SetPinDircection(uint8_t PORT , uint8_t PIN , uint8_t Mode)
{
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	2a 97       	sbiw	r28, 0x0a	; 10
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	de bf       	out	0x3e, r29	; 62
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	cd bf       	out	0x3d, r28	; 61
    21c6:	89 83       	std	Y+1, r24	; 0x01
    21c8:	6a 83       	std	Y+2, r22	; 0x02
    21ca:	4b 83       	std	Y+3, r20	; 0x03
	if(PIN >7)
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	88 30       	cpi	r24, 0x08	; 8
    21d0:	18 f0       	brcs	.+6      	; 0x21d8 <DIO_SetPinDircection+0x26>
	{
		return -1;
    21d2:	2f ef       	ldi	r18, 0xFF	; 255
    21d4:	2a 87       	std	Y+10, r18	; 0x0a
    21d6:	d1 c1       	rjmp	.+930    	; 0x257a <DIO_SetPinDircection+0x3c8>
	}
	else
	{
		if(Mode == OUTPUT)
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	81 30       	cpi	r24, 0x01	; 1
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <DIO_SetPinDircection+0x2e>
    21de:	7b c0       	rjmp	.+246    	; 0x22d6 <DIO_SetPinDircection+0x124>
		{
			switch(PORT)
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	28 2f       	mov	r18, r24
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	39 87       	std	Y+9, r19	; 0x09
    21e8:	28 87       	std	Y+8, r18	; 0x08
    21ea:	88 85       	ldd	r24, Y+8	; 0x08
    21ec:	99 85       	ldd	r25, Y+9	; 0x09
    21ee:	82 30       	cpi	r24, 0x02	; 2
    21f0:	91 05       	cpc	r25, r1
    21f2:	69 f1       	breq	.+90     	; 0x224e <DIO_SetPinDircection+0x9c>
    21f4:	28 85       	ldd	r18, Y+8	; 0x08
    21f6:	39 85       	ldd	r19, Y+9	; 0x09
    21f8:	23 30       	cpi	r18, 0x03	; 3
    21fa:	31 05       	cpc	r19, r1
    21fc:	34 f4       	brge	.+12     	; 0x220a <DIO_SetPinDircection+0x58>
    21fe:	88 85       	ldd	r24, Y+8	; 0x08
    2200:	99 85       	ldd	r25, Y+9	; 0x09
    2202:	81 30       	cpi	r24, 0x01	; 1
    2204:	91 05       	cpc	r25, r1
    2206:	69 f0       	breq	.+26     	; 0x2222 <DIO_SetPinDircection+0x70>
    2208:	63 c0       	rjmp	.+198    	; 0x22d0 <DIO_SetPinDircection+0x11e>
    220a:	28 85       	ldd	r18, Y+8	; 0x08
    220c:	39 85       	ldd	r19, Y+9	; 0x09
    220e:	23 30       	cpi	r18, 0x03	; 3
    2210:	31 05       	cpc	r19, r1
    2212:	91 f1       	breq	.+100    	; 0x2278 <DIO_SetPinDircection+0xc6>
    2214:	88 85       	ldd	r24, Y+8	; 0x08
    2216:	99 85       	ldd	r25, Y+9	; 0x09
    2218:	84 30       	cpi	r24, 0x04	; 4
    221a:	91 05       	cpc	r25, r1
    221c:	09 f4       	brne	.+2      	; 0x2220 <DIO_SetPinDircection+0x6e>
    221e:	42 c0       	rjmp	.+132    	; 0x22a4 <DIO_SetPinDircection+0xf2>
    2220:	57 c0       	rjmp	.+174    	; 0x22d0 <DIO_SetPinDircection+0x11e>
					{
					case PORTA:
						SET_BIT(DIO_DDRA,PIN);
    2222:	aa e3       	ldi	r26, 0x3A	; 58
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	ea e3       	ldi	r30, 0x3A	; 58
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	48 2f       	mov	r20, r24
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
    2230:	28 2f       	mov	r18, r24
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	02 2e       	mov	r0, r18
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <DIO_SetPinDircection+0x8e>
    223c:	88 0f       	add	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	0a 94       	dec	r0
    2242:	e2 f7       	brpl	.-8      	; 0x223c <DIO_SetPinDircection+0x8a>
    2244:	84 2b       	or	r24, r20
    2246:	8c 93       	st	X, r24
						return 1;
    2248:	91 e0       	ldi	r25, 0x01	; 1
    224a:	9a 87       	std	Y+10, r25	; 0x0a
    224c:	96 c1       	rjmp	.+812    	; 0x257a <DIO_SetPinDircection+0x3c8>
						break;
					case PORTB:
						SET_BIT(DIO_DDRB,PIN);
    224e:	a7 e3       	ldi	r26, 0x37	; 55
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	e7 e3       	ldi	r30, 0x37	; 55
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	48 2f       	mov	r20, r24
    225a:	8a 81       	ldd	r24, Y+2	; 0x02
    225c:	28 2f       	mov	r18, r24
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	02 c0       	rjmp	.+4      	; 0x226a <DIO_SetPinDircection+0xb8>
    2266:	88 0f       	add	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	2a 95       	dec	r18
    226c:	e2 f7       	brpl	.-8      	; 0x2266 <DIO_SetPinDircection+0xb4>
    226e:	84 2b       	or	r24, r20
    2270:	8c 93       	st	X, r24
						return 1;
    2272:	21 e0       	ldi	r18, 0x01	; 1
    2274:	2a 87       	std	Y+10, r18	; 0x0a
    2276:	81 c1       	rjmp	.+770    	; 0x257a <DIO_SetPinDircection+0x3c8>
						break;
					case PORTC:
						SET_BIT(DIO_DDRC,PIN);
    2278:	a4 e3       	ldi	r26, 0x34	; 52
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e4 e3       	ldi	r30, 0x34	; 52
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	48 2f       	mov	r20, r24
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	28 2f       	mov	r18, r24
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	02 2e       	mov	r0, r18
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <DIO_SetPinDircection+0xe4>
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	0a 94       	dec	r0
    2298:	e2 f7       	brpl	.-8      	; 0x2292 <DIO_SetPinDircection+0xe0>
    229a:	84 2b       	or	r24, r20
    229c:	8c 93       	st	X, r24
						return 1;
    229e:	31 e0       	ldi	r19, 0x01	; 1
    22a0:	3a 87       	std	Y+10, r19	; 0x0a
    22a2:	6b c1       	rjmp	.+726    	; 0x257a <DIO_SetPinDircection+0x3c8>
						break;
					case PORTD:
						SET_BIT(DIO_DDRD,PIN);
    22a4:	a1 e3       	ldi	r26, 0x31	; 49
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	e1 e3       	ldi	r30, 0x31	; 49
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	48 2f       	mov	r20, r24
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	28 2f       	mov	r18, r24
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	02 2e       	mov	r0, r18
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <DIO_SetPinDircection+0x110>
    22be:	88 0f       	add	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	0a 94       	dec	r0
    22c4:	e2 f7       	brpl	.-8      	; 0x22be <DIO_SetPinDircection+0x10c>
    22c6:	84 2b       	or	r24, r20
    22c8:	8c 93       	st	X, r24
						return 1;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	8a 87       	std	Y+10, r24	; 0x0a
    22ce:	55 c1       	rjmp	.+682    	; 0x257a <DIO_SetPinDircection+0x3c8>
						break;
					default:
						return -2;
    22d0:	9e ef       	ldi	r25, 0xFE	; 254
    22d2:	9a 87       	std	Y+10, r25	; 0x0a
    22d4:	52 c1       	rjmp	.+676    	; 0x257a <DIO_SetPinDircection+0x3c8>
					}
		}
		else if( Mode == INPUT)
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	88 23       	and	r24, r24
    22da:	09 f0       	breq	.+2      	; 0x22de <DIO_SetPinDircection+0x12c>
    22dc:	7f c0       	rjmp	.+254    	; 0x23dc <DIO_SetPinDircection+0x22a>
			{
			switch(PORT)
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	3f 83       	std	Y+7, r19	; 0x07
    22e6:	2e 83       	std	Y+6, r18	; 0x06
    22e8:	8e 81       	ldd	r24, Y+6	; 0x06
    22ea:	9f 81       	ldd	r25, Y+7	; 0x07
    22ec:	82 30       	cpi	r24, 0x02	; 2
    22ee:	91 05       	cpc	r25, r1
    22f0:	71 f1       	breq	.+92     	; 0x234e <DIO_SetPinDircection+0x19c>
    22f2:	2e 81       	ldd	r18, Y+6	; 0x06
    22f4:	3f 81       	ldd	r19, Y+7	; 0x07
    22f6:	23 30       	cpi	r18, 0x03	; 3
    22f8:	31 05       	cpc	r19, r1
    22fa:	34 f4       	brge	.+12     	; 0x2308 <DIO_SetPinDircection+0x156>
    22fc:	8e 81       	ldd	r24, Y+6	; 0x06
    22fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2300:	81 30       	cpi	r24, 0x01	; 1
    2302:	91 05       	cpc	r25, r1
    2304:	69 f0       	breq	.+26     	; 0x2320 <DIO_SetPinDircection+0x16e>
    2306:	67 c0       	rjmp	.+206    	; 0x23d6 <DIO_SetPinDircection+0x224>
    2308:	2e 81       	ldd	r18, Y+6	; 0x06
    230a:	3f 81       	ldd	r19, Y+7	; 0x07
    230c:	23 30       	cpi	r18, 0x03	; 3
    230e:	31 05       	cpc	r19, r1
    2310:	a1 f1       	breq	.+104    	; 0x237a <DIO_SetPinDircection+0x1c8>
    2312:	8e 81       	ldd	r24, Y+6	; 0x06
    2314:	9f 81       	ldd	r25, Y+7	; 0x07
    2316:	84 30       	cpi	r24, 0x04	; 4
    2318:	91 05       	cpc	r25, r1
    231a:	09 f4       	brne	.+2      	; 0x231e <DIO_SetPinDircection+0x16c>
    231c:	45 c0       	rjmp	.+138    	; 0x23a8 <DIO_SetPinDircection+0x1f6>
    231e:	5b c0       	rjmp	.+182    	; 0x23d6 <DIO_SetPinDircection+0x224>
				{
			case PORTA:
				CLR_BIT(DIO_DDRA,PIN);
    2320:	aa e3       	ldi	r26, 0x3A	; 58
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	ea e3       	ldi	r30, 0x3A	; 58
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	48 2f       	mov	r20, r24
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	28 2f       	mov	r18, r24
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	02 2e       	mov	r0, r18
    2338:	02 c0       	rjmp	.+4      	; 0x233e <DIO_SetPinDircection+0x18c>
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	0a 94       	dec	r0
    2340:	e2 f7       	brpl	.-8      	; 0x233a <DIO_SetPinDircection+0x188>
    2342:	80 95       	com	r24
    2344:	84 23       	and	r24, r20
    2346:	8c 93       	st	X, r24
					return 1;
    2348:	91 e0       	ldi	r25, 0x01	; 1
    234a:	9a 87       	std	Y+10, r25	; 0x0a
    234c:	16 c1       	rjmp	.+556    	; 0x257a <DIO_SetPinDircection+0x3c8>
					break;
			case PORTB:
				CLR_BIT(DIO_DDRB,PIN);
    234e:	a7 e3       	ldi	r26, 0x37	; 55
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e7 e3       	ldi	r30, 0x37	; 55
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	48 2f       	mov	r20, r24
    235a:	8a 81       	ldd	r24, Y+2	; 0x02
    235c:	28 2f       	mov	r18, r24
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	02 c0       	rjmp	.+4      	; 0x236a <DIO_SetPinDircection+0x1b8>
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	2a 95       	dec	r18
    236c:	e2 f7       	brpl	.-8      	; 0x2366 <DIO_SetPinDircection+0x1b4>
    236e:	80 95       	com	r24
    2370:	84 23       	and	r24, r20
    2372:	8c 93       	st	X, r24
					return 1;
    2374:	21 e0       	ldi	r18, 0x01	; 1
    2376:	2a 87       	std	Y+10, r18	; 0x0a
    2378:	00 c1       	rjmp	.+512    	; 0x257a <DIO_SetPinDircection+0x3c8>
					break;
			case PORTC:
				CLR_BIT(DIO_DDRC,PIN);
    237a:	a4 e3       	ldi	r26, 0x34	; 52
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	e4 e3       	ldi	r30, 0x34	; 52
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	48 2f       	mov	r20, r24
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	28 2f       	mov	r18, r24
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	02 2e       	mov	r0, r18
    2392:	02 c0       	rjmp	.+4      	; 0x2398 <DIO_SetPinDircection+0x1e6>
    2394:	88 0f       	add	r24, r24
    2396:	99 1f       	adc	r25, r25
    2398:	0a 94       	dec	r0
    239a:	e2 f7       	brpl	.-8      	; 0x2394 <DIO_SetPinDircection+0x1e2>
    239c:	80 95       	com	r24
    239e:	84 23       	and	r24, r20
    23a0:	8c 93       	st	X, r24
					return 1;
    23a2:	31 e0       	ldi	r19, 0x01	; 1
    23a4:	3a 87       	std	Y+10, r19	; 0x0a
    23a6:	e9 c0       	rjmp	.+466    	; 0x257a <DIO_SetPinDircection+0x3c8>
					break;
			case PORTD:
				CLR_BIT(DIO_DDRD,PIN);
    23a8:	a1 e3       	ldi	r26, 0x31	; 49
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	e1 e3       	ldi	r30, 0x31	; 49
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	48 2f       	mov	r20, r24
    23b4:	8a 81       	ldd	r24, Y+2	; 0x02
    23b6:	28 2f       	mov	r18, r24
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	02 2e       	mov	r0, r18
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <DIO_SetPinDircection+0x214>
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	0a 94       	dec	r0
    23c8:	e2 f7       	brpl	.-8      	; 0x23c2 <DIO_SetPinDircection+0x210>
    23ca:	80 95       	com	r24
    23cc:	84 23       	and	r24, r20
    23ce:	8c 93       	st	X, r24
					return 1;
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	8a 87       	std	Y+10, r24	; 0x0a
    23d4:	d2 c0       	rjmp	.+420    	; 0x257a <DIO_SetPinDircection+0x3c8>
					break;
			default:
					return -2;
    23d6:	9e ef       	ldi	r25, 0xFE	; 254
    23d8:	9a 87       	std	Y+10, r25	; 0x0a
    23da:	cf c0       	rjmp	.+414    	; 0x257a <DIO_SetPinDircection+0x3c8>
				}
			}
		else if (Mode == INPUT_PULLUP)
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	82 30       	cpi	r24, 0x02	; 2
    23e0:	09 f0       	breq	.+2      	; 0x23e4 <DIO_SetPinDircection+0x232>
    23e2:	c9 c0       	rjmp	.+402    	; 0x2576 <DIO_SetPinDircection+0x3c4>
		{
			switch(PORT)
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	28 2f       	mov	r18, r24
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	3d 83       	std	Y+5, r19	; 0x05
    23ec:	2c 83       	std	Y+4, r18	; 0x04
    23ee:	8c 81       	ldd	r24, Y+4	; 0x04
    23f0:	9d 81       	ldd	r25, Y+5	; 0x05
    23f2:	82 30       	cpi	r24, 0x02	; 2
    23f4:	91 05       	cpc	r25, r1
    23f6:	09 f4       	brne	.+2      	; 0x23fa <DIO_SetPinDircection+0x248>
    23f8:	41 c0       	rjmp	.+130    	; 0x247c <DIO_SetPinDircection+0x2ca>
    23fa:	2c 81       	ldd	r18, Y+4	; 0x04
    23fc:	3d 81       	ldd	r19, Y+5	; 0x05
    23fe:	23 30       	cpi	r18, 0x03	; 3
    2400:	31 05       	cpc	r19, r1
    2402:	34 f4       	brge	.+12     	; 0x2410 <DIO_SetPinDircection+0x25e>
    2404:	8c 81       	ldd	r24, Y+4	; 0x04
    2406:	9d 81       	ldd	r25, Y+5	; 0x05
    2408:	81 30       	cpi	r24, 0x01	; 1
    240a:	91 05       	cpc	r25, r1
    240c:	71 f0       	breq	.+28     	; 0x242a <DIO_SetPinDircection+0x278>
    240e:	b0 c0       	rjmp	.+352    	; 0x2570 <DIO_SetPinDircection+0x3be>
    2410:	2c 81       	ldd	r18, Y+4	; 0x04
    2412:	3d 81       	ldd	r19, Y+5	; 0x05
    2414:	23 30       	cpi	r18, 0x03	; 3
    2416:	31 05       	cpc	r19, r1
    2418:	09 f4       	brne	.+2      	; 0x241c <DIO_SetPinDircection+0x26a>
    241a:	58 c0       	rjmp	.+176    	; 0x24cc <DIO_SetPinDircection+0x31a>
    241c:	8c 81       	ldd	r24, Y+4	; 0x04
    241e:	9d 81       	ldd	r25, Y+5	; 0x05
    2420:	84 30       	cpi	r24, 0x04	; 4
    2422:	91 05       	cpc	r25, r1
    2424:	09 f4       	brne	.+2      	; 0x2428 <DIO_SetPinDircection+0x276>
    2426:	7b c0       	rjmp	.+246    	; 0x251e <DIO_SetPinDircection+0x36c>
    2428:	a3 c0       	rjmp	.+326    	; 0x2570 <DIO_SetPinDircection+0x3be>
							{
						case PORTA:
							CLR_BIT(DIO_DDRA,PIN);
    242a:	aa e3       	ldi	r26, 0x3A	; 58
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	ea e3       	ldi	r30, 0x3A	; 58
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	48 2f       	mov	r20, r24
    2436:	8a 81       	ldd	r24, Y+2	; 0x02
    2438:	28 2f       	mov	r18, r24
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	02 c0       	rjmp	.+4      	; 0x2446 <DIO_SetPinDircection+0x294>
    2442:	88 0f       	add	r24, r24
    2444:	99 1f       	adc	r25, r25
    2446:	2a 95       	dec	r18
    2448:	e2 f7       	brpl	.-8      	; 0x2442 <DIO_SetPinDircection+0x290>
    244a:	80 95       	com	r24
    244c:	84 23       	and	r24, r20
    244e:	8c 93       	st	X, r24
							SET_BIT(DIO_PORTA,PIN);
    2450:	ab e3       	ldi	r26, 0x3B	; 59
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	eb e3       	ldi	r30, 0x3B	; 59
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	48 2f       	mov	r20, r24
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	28 2f       	mov	r18, r24
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	02 2e       	mov	r0, r18
    2468:	02 c0       	rjmp	.+4      	; 0x246e <DIO_SetPinDircection+0x2bc>
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	0a 94       	dec	r0
    2470:	e2 f7       	brpl	.-8      	; 0x246a <DIO_SetPinDircection+0x2b8>
    2472:	84 2b       	or	r24, r20
    2474:	8c 93       	st	X, r24
								return 1;
    2476:	91 e0       	ldi	r25, 0x01	; 1
    2478:	9a 87       	std	Y+10, r25	; 0x0a
    247a:	7f c0       	rjmp	.+254    	; 0x257a <DIO_SetPinDircection+0x3c8>
								break;
						case PORTB:
							CLR_BIT(DIO_DDRB,PIN);
    247c:	a7 e3       	ldi	r26, 0x37	; 55
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e7 e3       	ldi	r30, 0x37	; 55
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	48 2f       	mov	r20, r24
    2488:	8a 81       	ldd	r24, Y+2	; 0x02
    248a:	28 2f       	mov	r18, r24
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <DIO_SetPinDircection+0x2e6>
    2494:	88 0f       	add	r24, r24
    2496:	99 1f       	adc	r25, r25
    2498:	2a 95       	dec	r18
    249a:	e2 f7       	brpl	.-8      	; 0x2494 <DIO_SetPinDircection+0x2e2>
    249c:	80 95       	com	r24
    249e:	84 23       	and	r24, r20
    24a0:	8c 93       	st	X, r24
							SET_BIT(DIO_PORTB,PIN);
    24a2:	a8 e3       	ldi	r26, 0x38	; 56
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	e8 e3       	ldi	r30, 0x38	; 56
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	48 2f       	mov	r20, r24
    24ae:	8a 81       	ldd	r24, Y+2	; 0x02
    24b0:	28 2f       	mov	r18, r24
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	02 c0       	rjmp	.+4      	; 0x24be <DIO_SetPinDircection+0x30c>
    24ba:	88 0f       	add	r24, r24
    24bc:	99 1f       	adc	r25, r25
    24be:	2a 95       	dec	r18
    24c0:	e2 f7       	brpl	.-8      	; 0x24ba <DIO_SetPinDircection+0x308>
    24c2:	84 2b       	or	r24, r20
    24c4:	8c 93       	st	X, r24
								return 1;
    24c6:	21 e0       	ldi	r18, 0x01	; 1
    24c8:	2a 87       	std	Y+10, r18	; 0x0a
    24ca:	57 c0       	rjmp	.+174    	; 0x257a <DIO_SetPinDircection+0x3c8>
								break;
						case PORTC:
							CLR_BIT(DIO_DDRC,PIN);
    24cc:	a4 e3       	ldi	r26, 0x34	; 52
    24ce:	b0 e0       	ldi	r27, 0x00	; 0
    24d0:	e4 e3       	ldi	r30, 0x34	; 52
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	80 81       	ld	r24, Z
    24d6:	48 2f       	mov	r20, r24
    24d8:	8a 81       	ldd	r24, Y+2	; 0x02
    24da:	28 2f       	mov	r18, r24
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	02 c0       	rjmp	.+4      	; 0x24e8 <DIO_SetPinDircection+0x336>
    24e4:	88 0f       	add	r24, r24
    24e6:	99 1f       	adc	r25, r25
    24e8:	2a 95       	dec	r18
    24ea:	e2 f7       	brpl	.-8      	; 0x24e4 <DIO_SetPinDircection+0x332>
    24ec:	80 95       	com	r24
    24ee:	84 23       	and	r24, r20
    24f0:	8c 93       	st	X, r24
							SET_BIT(DIO_PORTC,PIN);
    24f2:	a5 e3       	ldi	r26, 0x35	; 53
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	e5 e3       	ldi	r30, 0x35	; 53
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	48 2f       	mov	r20, r24
    24fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	02 2e       	mov	r0, r18
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <DIO_SetPinDircection+0x35e>
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	0a 94       	dec	r0
    2512:	e2 f7       	brpl	.-8      	; 0x250c <DIO_SetPinDircection+0x35a>
    2514:	84 2b       	or	r24, r20
    2516:	8c 93       	st	X, r24
								return 1;
    2518:	31 e0       	ldi	r19, 0x01	; 1
    251a:	3a 87       	std	Y+10, r19	; 0x0a
    251c:	2e c0       	rjmp	.+92     	; 0x257a <DIO_SetPinDircection+0x3c8>
								break;
						case PORTD:
							CLR_BIT(DIO_DDRD,PIN);
    251e:	a1 e3       	ldi	r26, 0x31	; 49
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e1 e3       	ldi	r30, 0x31	; 49
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	48 2f       	mov	r20, r24
    252a:	8a 81       	ldd	r24, Y+2	; 0x02
    252c:	28 2f       	mov	r18, r24
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	02 c0       	rjmp	.+4      	; 0x253a <DIO_SetPinDircection+0x388>
    2536:	88 0f       	add	r24, r24
    2538:	99 1f       	adc	r25, r25
    253a:	2a 95       	dec	r18
    253c:	e2 f7       	brpl	.-8      	; 0x2536 <DIO_SetPinDircection+0x384>
    253e:	80 95       	com	r24
    2540:	84 23       	and	r24, r20
    2542:	8c 93       	st	X, r24
							SET_BIT(DIO_PORTD,PIN);
    2544:	a2 e3       	ldi	r26, 0x32	; 50
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	e2 e3       	ldi	r30, 0x32	; 50
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	48 2f       	mov	r20, r24
    2550:	8a 81       	ldd	r24, Y+2	; 0x02
    2552:	28 2f       	mov	r18, r24
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	02 2e       	mov	r0, r18
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <DIO_SetPinDircection+0x3b0>
    255e:	88 0f       	add	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	0a 94       	dec	r0
    2564:	e2 f7       	brpl	.-8      	; 0x255e <DIO_SetPinDircection+0x3ac>
    2566:	84 2b       	or	r24, r20
    2568:	8c 93       	st	X, r24
								return 1;
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	8a 87       	std	Y+10, r24	; 0x0a
    256e:	05 c0       	rjmp	.+10     	; 0x257a <DIO_SetPinDircection+0x3c8>
								break;
						default:
								return -2;
    2570:	9e ef       	ldi	r25, 0xFE	; 254
    2572:	9a 87       	std	Y+10, r25	; 0x0a
    2574:	02 c0       	rjmp	.+4      	; 0x257a <DIO_SetPinDircection+0x3c8>
							}
		}
		else
		{
			return -3;
    2576:	2d ef       	ldi	r18, 0xFD	; 253
    2578:	2a 87       	std	Y+10, r18	; 0x0a
    257a:	8a 85       	ldd	r24, Y+10	; 0x0a
		}
	}
}
    257c:	2a 96       	adiw	r28, 0x0a	; 10
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	de bf       	out	0x3e, r29	; 62
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	cd bf       	out	0x3d, r28	; 61
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	08 95       	ret

0000258e <DIO_SetPortDirection>:
 * Set Port direction
 * INPUT : PORT name , (OUTPUT or INPUT)
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_SetPortDirection(uint8_t PORT, uint8_t Mode)
{
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	00 d0       	rcall	.+0      	; 0x2594 <DIO_SetPortDirection+0x6>
    2594:	00 d0       	rcall	.+0      	; 0x2596 <DIO_SetPortDirection+0x8>
    2596:	0f 92       	push	r0
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
    259c:	89 83       	std	Y+1, r24	; 0x01
    259e:	6a 83       	std	Y+2, r22	; 0x02
	switch(PORT)
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	28 2f       	mov	r18, r24
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	3d 83       	std	Y+5, r19	; 0x05
    25a8:	2c 83       	std	Y+4, r18	; 0x04
    25aa:	8c 81       	ldd	r24, Y+4	; 0x04
    25ac:	9d 81       	ldd	r25, Y+5	; 0x05
    25ae:	82 30       	cpi	r24, 0x02	; 2
    25b0:	91 05       	cpc	r25, r1
    25b2:	69 f1       	breq	.+90     	; 0x260e <DIO_SetPortDirection+0x80>
    25b4:	2c 81       	ldd	r18, Y+4	; 0x04
    25b6:	3d 81       	ldd	r19, Y+5	; 0x05
    25b8:	23 30       	cpi	r18, 0x03	; 3
    25ba:	31 05       	cpc	r19, r1
    25bc:	34 f4       	brge	.+12     	; 0x25ca <DIO_SetPortDirection+0x3c>
    25be:	8c 81       	ldd	r24, Y+4	; 0x04
    25c0:	9d 81       	ldd	r25, Y+5	; 0x05
    25c2:	81 30       	cpi	r24, 0x01	; 1
    25c4:	91 05       	cpc	r25, r1
    25c6:	69 f0       	breq	.+26     	; 0x25e2 <DIO_SetPortDirection+0x54>
    25c8:	64 c0       	rjmp	.+200    	; 0x2692 <DIO_SetPortDirection+0x104>
    25ca:	2c 81       	ldd	r18, Y+4	; 0x04
    25cc:	3d 81       	ldd	r19, Y+5	; 0x05
    25ce:	23 30       	cpi	r18, 0x03	; 3
    25d0:	31 05       	cpc	r19, r1
    25d2:	99 f1       	breq	.+102    	; 0x263a <DIO_SetPortDirection+0xac>
    25d4:	8c 81       	ldd	r24, Y+4	; 0x04
    25d6:	9d 81       	ldd	r25, Y+5	; 0x05
    25d8:	84 30       	cpi	r24, 0x04	; 4
    25da:	91 05       	cpc	r25, r1
    25dc:	09 f4       	brne	.+2      	; 0x25e0 <DIO_SetPortDirection+0x52>
    25de:	43 c0       	rjmp	.+134    	; 0x2666 <DIO_SetPortDirection+0xd8>
    25e0:	58 c0       	rjmp	.+176    	; 0x2692 <DIO_SetPortDirection+0x104>
	{
	case PORTA:
		if(Mode == OUTPUT)
    25e2:	8a 81       	ldd	r24, Y+2	; 0x02
    25e4:	81 30       	cpi	r24, 0x01	; 1
    25e6:	39 f4       	brne	.+14     	; 0x25f6 <DIO_SetPortDirection+0x68>
		{
			DIO_DDRA =0xff;
    25e8:	ea e3       	ldi	r30, 0x3A	; 58
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	8f ef       	ldi	r24, 0xFF	; 255
    25ee:	80 83       	st	Z, r24
			return 1;
    25f0:	91 e0       	ldi	r25, 0x01	; 1
    25f2:	9b 83       	std	Y+3, r25	; 0x03
    25f4:	50 c0       	rjmp	.+160    	; 0x2696 <DIO_SetPortDirection+0x108>
		}
		else if (Mode == INPUT)
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	88 23       	and	r24, r24
    25fa:	31 f4       	brne	.+12     	; 0x2608 <DIO_SetPortDirection+0x7a>
		{
			DIO_DDRA = 0x00;
    25fc:	ea e3       	ldi	r30, 0x3A	; 58
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	10 82       	st	Z, r1
			return 1;
    2602:	21 e0       	ldi	r18, 0x01	; 1
    2604:	2b 83       	std	Y+3, r18	; 0x03
    2606:	47 c0       	rjmp	.+142    	; 0x2696 <DIO_SetPortDirection+0x108>
		}
		else
			return -1;
    2608:	3f ef       	ldi	r19, 0xFF	; 255
    260a:	3b 83       	std	Y+3, r19	; 0x03
    260c:	44 c0       	rjmp	.+136    	; 0x2696 <DIO_SetPortDirection+0x108>
		break;
	case PORTB:
			if(Mode == OUTPUT)
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	81 30       	cpi	r24, 0x01	; 1
    2612:	39 f4       	brne	.+14     	; 0x2622 <DIO_SetPortDirection+0x94>
			{
				DIO_DDRB =0xff;
    2614:	e7 e3       	ldi	r30, 0x37	; 55
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	8f ef       	ldi	r24, 0xFF	; 255
    261a:	80 83       	st	Z, r24
				return 1;
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	8b 83       	std	Y+3, r24	; 0x03
    2620:	3a c0       	rjmp	.+116    	; 0x2696 <DIO_SetPortDirection+0x108>
			}
			else if (Mode == INPUT)
    2622:	8a 81       	ldd	r24, Y+2	; 0x02
    2624:	88 23       	and	r24, r24
    2626:	31 f4       	brne	.+12     	; 0x2634 <DIO_SetPortDirection+0xa6>
			{
				DIO_DDRB = 0x00;
    2628:	e7 e3       	ldi	r30, 0x37	; 55
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	10 82       	st	Z, r1
				return 1;
    262e:	91 e0       	ldi	r25, 0x01	; 1
    2630:	9b 83       	std	Y+3, r25	; 0x03
    2632:	31 c0       	rjmp	.+98     	; 0x2696 <DIO_SetPortDirection+0x108>
			}
			else
				return -1;
    2634:	2f ef       	ldi	r18, 0xFF	; 255
    2636:	2b 83       	std	Y+3, r18	; 0x03
    2638:	2e c0       	rjmp	.+92     	; 0x2696 <DIO_SetPortDirection+0x108>
			break;
	case PORTC:
			if(Mode == OUTPUT)
    263a:	8a 81       	ldd	r24, Y+2	; 0x02
    263c:	81 30       	cpi	r24, 0x01	; 1
    263e:	39 f4       	brne	.+14     	; 0x264e <DIO_SetPortDirection+0xc0>
			{
				DIO_DDRC =0xff;
    2640:	e4 e3       	ldi	r30, 0x34	; 52
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	8f ef       	ldi	r24, 0xFF	; 255
    2646:	80 83       	st	Z, r24
				return 1;
    2648:	31 e0       	ldi	r19, 0x01	; 1
    264a:	3b 83       	std	Y+3, r19	; 0x03
    264c:	24 c0       	rjmp	.+72     	; 0x2696 <DIO_SetPortDirection+0x108>
			}
			else if (Mode == INPUT)
    264e:	8a 81       	ldd	r24, Y+2	; 0x02
    2650:	88 23       	and	r24, r24
    2652:	31 f4       	brne	.+12     	; 0x2660 <DIO_SetPortDirection+0xd2>
			{
				DIO_DDRC = 0x00;
    2654:	e4 e3       	ldi	r30, 0x34	; 52
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	10 82       	st	Z, r1
				return 1;
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	8b 83       	std	Y+3, r24	; 0x03
    265e:	1b c0       	rjmp	.+54     	; 0x2696 <DIO_SetPortDirection+0x108>
			}
			else
				return -1;
    2660:	9f ef       	ldi	r25, 0xFF	; 255
    2662:	9b 83       	std	Y+3, r25	; 0x03
    2664:	18 c0       	rjmp	.+48     	; 0x2696 <DIO_SetPortDirection+0x108>
			break;
	case PORTD:
			if(Mode == OUTPUT)
    2666:	8a 81       	ldd	r24, Y+2	; 0x02
    2668:	81 30       	cpi	r24, 0x01	; 1
    266a:	39 f4       	brne	.+14     	; 0x267a <DIO_SetPortDirection+0xec>
			{
				DIO_DDRD =0xff;
    266c:	e1 e3       	ldi	r30, 0x31	; 49
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	8f ef       	ldi	r24, 0xFF	; 255
    2672:	80 83       	st	Z, r24
				return 1;
    2674:	21 e0       	ldi	r18, 0x01	; 1
    2676:	2b 83       	std	Y+3, r18	; 0x03
    2678:	0e c0       	rjmp	.+28     	; 0x2696 <DIO_SetPortDirection+0x108>
			}
			else if (Mode == INPUT)
    267a:	8a 81       	ldd	r24, Y+2	; 0x02
    267c:	88 23       	and	r24, r24
    267e:	31 f4       	brne	.+12     	; 0x268c <DIO_SetPortDirection+0xfe>
			{
				DIO_DDRD = 0x00;
    2680:	e1 e3       	ldi	r30, 0x31	; 49
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	10 82       	st	Z, r1
				return 1;
    2686:	31 e0       	ldi	r19, 0x01	; 1
    2688:	3b 83       	std	Y+3, r19	; 0x03
    268a:	05 c0       	rjmp	.+10     	; 0x2696 <DIO_SetPortDirection+0x108>
			}
			else
				return -1;
    268c:	8f ef       	ldi	r24, 0xFF	; 255
    268e:	8b 83       	std	Y+3, r24	; 0x03
    2690:	02 c0       	rjmp	.+4      	; 0x2696 <DIO_SetPortDirection+0x108>
			break;
	default:
			return -1;
    2692:	9f ef       	ldi	r25, 0xFF	; 255
    2694:	9b 83       	std	Y+3, r25	; 0x03
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <DIO_SetPinValue>:
 * Set Pin value from any port
 * INPUT : PORT name , PIN number , value
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_SetPinValue(uint8_t PORT , uint8_t PIN , uint8_t value)
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	28 97       	sbiw	r28, 0x08	; 8
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	6a 83       	std	Y+2, r22	; 0x02
    26c0:	4b 83       	std	Y+3, r20	; 0x03
	if(PIN >7)
    26c2:	8a 81       	ldd	r24, Y+2	; 0x02
    26c4:	88 30       	cpi	r24, 0x08	; 8
    26c6:	18 f0       	brcs	.+6      	; 0x26ce <DIO_SetPinValue+0x26>
		{
			return -1;
    26c8:	2f ef       	ldi	r18, 0xFF	; 255
    26ca:	28 87       	std	Y+8, r18	; 0x08
    26cc:	04 c1       	rjmp	.+520    	; 0x28d6 <DIO_SetPinValue+0x22e>
		}
		else
		{
			if(value == HIGH)
    26ce:	8b 81       	ldd	r24, Y+3	; 0x03
    26d0:	81 30       	cpi	r24, 0x01	; 1
    26d2:	09 f0       	breq	.+2      	; 0x26d6 <DIO_SetPinValue+0x2e>
    26d4:	7b c0       	rjmp	.+246    	; 0x27cc <DIO_SetPinValue+0x124>
			{
				switch(PORT)
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	28 2f       	mov	r18, r24
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	3f 83       	std	Y+7, r19	; 0x07
    26de:	2e 83       	std	Y+6, r18	; 0x06
    26e0:	8e 81       	ldd	r24, Y+6	; 0x06
    26e2:	9f 81       	ldd	r25, Y+7	; 0x07
    26e4:	82 30       	cpi	r24, 0x02	; 2
    26e6:	91 05       	cpc	r25, r1
    26e8:	69 f1       	breq	.+90     	; 0x2744 <DIO_SetPinValue+0x9c>
    26ea:	2e 81       	ldd	r18, Y+6	; 0x06
    26ec:	3f 81       	ldd	r19, Y+7	; 0x07
    26ee:	23 30       	cpi	r18, 0x03	; 3
    26f0:	31 05       	cpc	r19, r1
    26f2:	34 f4       	brge	.+12     	; 0x2700 <DIO_SetPinValue+0x58>
    26f4:	8e 81       	ldd	r24, Y+6	; 0x06
    26f6:	9f 81       	ldd	r25, Y+7	; 0x07
    26f8:	81 30       	cpi	r24, 0x01	; 1
    26fa:	91 05       	cpc	r25, r1
    26fc:	69 f0       	breq	.+26     	; 0x2718 <DIO_SetPinValue+0x70>
    26fe:	63 c0       	rjmp	.+198    	; 0x27c6 <DIO_SetPinValue+0x11e>
    2700:	2e 81       	ldd	r18, Y+6	; 0x06
    2702:	3f 81       	ldd	r19, Y+7	; 0x07
    2704:	23 30       	cpi	r18, 0x03	; 3
    2706:	31 05       	cpc	r19, r1
    2708:	91 f1       	breq	.+100    	; 0x276e <DIO_SetPinValue+0xc6>
    270a:	8e 81       	ldd	r24, Y+6	; 0x06
    270c:	9f 81       	ldd	r25, Y+7	; 0x07
    270e:	84 30       	cpi	r24, 0x04	; 4
    2710:	91 05       	cpc	r25, r1
    2712:	09 f4       	brne	.+2      	; 0x2716 <DIO_SetPinValue+0x6e>
    2714:	42 c0       	rjmp	.+132    	; 0x279a <DIO_SetPinValue+0xf2>
    2716:	57 c0       	rjmp	.+174    	; 0x27c6 <DIO_SetPinValue+0x11e>
						{
						case PORTA:
							SET_BIT(DIO_PORTA,PIN);
    2718:	ab e3       	ldi	r26, 0x3B	; 59
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	eb e3       	ldi	r30, 0x3B	; 59
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
    2722:	48 2f       	mov	r20, r24
    2724:	8a 81       	ldd	r24, Y+2	; 0x02
    2726:	28 2f       	mov	r18, r24
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	02 2e       	mov	r0, r18
    2730:	02 c0       	rjmp	.+4      	; 0x2736 <DIO_SetPinValue+0x8e>
    2732:	88 0f       	add	r24, r24
    2734:	99 1f       	adc	r25, r25
    2736:	0a 94       	dec	r0
    2738:	e2 f7       	brpl	.-8      	; 0x2732 <DIO_SetPinValue+0x8a>
    273a:	84 2b       	or	r24, r20
    273c:	8c 93       	st	X, r24
							return 1;
    273e:	91 e0       	ldi	r25, 0x01	; 1
    2740:	98 87       	std	Y+8, r25	; 0x08
    2742:	c9 c0       	rjmp	.+402    	; 0x28d6 <DIO_SetPinValue+0x22e>
							break;
						case PORTB:
							SET_BIT(DIO_PORTB,PIN);
    2744:	a8 e3       	ldi	r26, 0x38	; 56
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	e8 e3       	ldi	r30, 0x38	; 56
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	48 2f       	mov	r20, r24
    2750:	8a 81       	ldd	r24, Y+2	; 0x02
    2752:	28 2f       	mov	r18, r24
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	02 c0       	rjmp	.+4      	; 0x2760 <DIO_SetPinValue+0xb8>
    275c:	88 0f       	add	r24, r24
    275e:	99 1f       	adc	r25, r25
    2760:	2a 95       	dec	r18
    2762:	e2 f7       	brpl	.-8      	; 0x275c <DIO_SetPinValue+0xb4>
    2764:	84 2b       	or	r24, r20
    2766:	8c 93       	st	X, r24
							return 1;
    2768:	21 e0       	ldi	r18, 0x01	; 1
    276a:	28 87       	std	Y+8, r18	; 0x08
    276c:	b4 c0       	rjmp	.+360    	; 0x28d6 <DIO_SetPinValue+0x22e>
							break;
						case PORTC:
							SET_BIT(DIO_PORTC,PIN);
    276e:	a5 e3       	ldi	r26, 0x35	; 53
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e5 e3       	ldi	r30, 0x35	; 53
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	48 2f       	mov	r20, r24
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	28 2f       	mov	r18, r24
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	02 2e       	mov	r0, r18
    2786:	02 c0       	rjmp	.+4      	; 0x278c <DIO_SetPinValue+0xe4>
    2788:	88 0f       	add	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	0a 94       	dec	r0
    278e:	e2 f7       	brpl	.-8      	; 0x2788 <DIO_SetPinValue+0xe0>
    2790:	84 2b       	or	r24, r20
    2792:	8c 93       	st	X, r24
							return 1;
    2794:	31 e0       	ldi	r19, 0x01	; 1
    2796:	38 87       	std	Y+8, r19	; 0x08
    2798:	9e c0       	rjmp	.+316    	; 0x28d6 <DIO_SetPinValue+0x22e>
							break;
						case PORTD:
							SET_BIT(DIO_PORTD,PIN);
    279a:	a2 e3       	ldi	r26, 0x32	; 50
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	e2 e3       	ldi	r30, 0x32	; 50
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	80 81       	ld	r24, Z
    27a4:	48 2f       	mov	r20, r24
    27a6:	8a 81       	ldd	r24, Y+2	; 0x02
    27a8:	28 2f       	mov	r18, r24
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	02 2e       	mov	r0, r18
    27b2:	02 c0       	rjmp	.+4      	; 0x27b8 <DIO_SetPinValue+0x110>
    27b4:	88 0f       	add	r24, r24
    27b6:	99 1f       	adc	r25, r25
    27b8:	0a 94       	dec	r0
    27ba:	e2 f7       	brpl	.-8      	; 0x27b4 <DIO_SetPinValue+0x10c>
    27bc:	84 2b       	or	r24, r20
    27be:	8c 93       	st	X, r24
							return 1;
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	88 87       	std	Y+8, r24	; 0x08
    27c4:	88 c0       	rjmp	.+272    	; 0x28d6 <DIO_SetPinValue+0x22e>
							break;
						default:
							return -2;
    27c6:	9e ef       	ldi	r25, 0xFE	; 254
    27c8:	98 87       	std	Y+8, r25	; 0x08
    27ca:	85 c0       	rjmp	.+266    	; 0x28d6 <DIO_SetPinValue+0x22e>
						}
			}
			else if( value == LOW)
    27cc:	8b 81       	ldd	r24, Y+3	; 0x03
    27ce:	88 23       	and	r24, r24
    27d0:	09 f0       	breq	.+2      	; 0x27d4 <DIO_SetPinValue+0x12c>
    27d2:	7f c0       	rjmp	.+254    	; 0x28d2 <DIO_SetPinValue+0x22a>
				{
				switch(PORT)
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	28 2f       	mov	r18, r24
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	3d 83       	std	Y+5, r19	; 0x05
    27dc:	2c 83       	std	Y+4, r18	; 0x04
    27de:	8c 81       	ldd	r24, Y+4	; 0x04
    27e0:	9d 81       	ldd	r25, Y+5	; 0x05
    27e2:	82 30       	cpi	r24, 0x02	; 2
    27e4:	91 05       	cpc	r25, r1
    27e6:	71 f1       	breq	.+92     	; 0x2844 <DIO_SetPinValue+0x19c>
    27e8:	2c 81       	ldd	r18, Y+4	; 0x04
    27ea:	3d 81       	ldd	r19, Y+5	; 0x05
    27ec:	23 30       	cpi	r18, 0x03	; 3
    27ee:	31 05       	cpc	r19, r1
    27f0:	34 f4       	brge	.+12     	; 0x27fe <DIO_SetPinValue+0x156>
    27f2:	8c 81       	ldd	r24, Y+4	; 0x04
    27f4:	9d 81       	ldd	r25, Y+5	; 0x05
    27f6:	81 30       	cpi	r24, 0x01	; 1
    27f8:	91 05       	cpc	r25, r1
    27fa:	69 f0       	breq	.+26     	; 0x2816 <DIO_SetPinValue+0x16e>
    27fc:	67 c0       	rjmp	.+206    	; 0x28cc <DIO_SetPinValue+0x224>
    27fe:	2c 81       	ldd	r18, Y+4	; 0x04
    2800:	3d 81       	ldd	r19, Y+5	; 0x05
    2802:	23 30       	cpi	r18, 0x03	; 3
    2804:	31 05       	cpc	r19, r1
    2806:	a1 f1       	breq	.+104    	; 0x2870 <DIO_SetPinValue+0x1c8>
    2808:	8c 81       	ldd	r24, Y+4	; 0x04
    280a:	9d 81       	ldd	r25, Y+5	; 0x05
    280c:	84 30       	cpi	r24, 0x04	; 4
    280e:	91 05       	cpc	r25, r1
    2810:	09 f4       	brne	.+2      	; 0x2814 <DIO_SetPinValue+0x16c>
    2812:	45 c0       	rjmp	.+138    	; 0x289e <DIO_SetPinValue+0x1f6>
    2814:	5b c0       	rjmp	.+182    	; 0x28cc <DIO_SetPinValue+0x224>
					{
				case PORTA:
					CLR_BIT(DIO_PORTA,PIN);
    2816:	ab e3       	ldi	r26, 0x3B	; 59
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	eb e3       	ldi	r30, 0x3B	; 59
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	48 2f       	mov	r20, r24
    2822:	8a 81       	ldd	r24, Y+2	; 0x02
    2824:	28 2f       	mov	r18, r24
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	02 2e       	mov	r0, r18
    282e:	02 c0       	rjmp	.+4      	; 0x2834 <DIO_SetPinValue+0x18c>
    2830:	88 0f       	add	r24, r24
    2832:	99 1f       	adc	r25, r25
    2834:	0a 94       	dec	r0
    2836:	e2 f7       	brpl	.-8      	; 0x2830 <DIO_SetPinValue+0x188>
    2838:	80 95       	com	r24
    283a:	84 23       	and	r24, r20
    283c:	8c 93       	st	X, r24
						return 1;
    283e:	91 e0       	ldi	r25, 0x01	; 1
    2840:	98 87       	std	Y+8, r25	; 0x08
    2842:	49 c0       	rjmp	.+146    	; 0x28d6 <DIO_SetPinValue+0x22e>
						break;
				case PORTB:
					CLR_BIT(DIO_PORTB,PIN);
    2844:	a8 e3       	ldi	r26, 0x38	; 56
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	e8 e3       	ldi	r30, 0x38	; 56
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	80 81       	ld	r24, Z
    284e:	48 2f       	mov	r20, r24
    2850:	8a 81       	ldd	r24, Y+2	; 0x02
    2852:	28 2f       	mov	r18, r24
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	02 c0       	rjmp	.+4      	; 0x2860 <DIO_SetPinValue+0x1b8>
    285c:	88 0f       	add	r24, r24
    285e:	99 1f       	adc	r25, r25
    2860:	2a 95       	dec	r18
    2862:	e2 f7       	brpl	.-8      	; 0x285c <DIO_SetPinValue+0x1b4>
    2864:	80 95       	com	r24
    2866:	84 23       	and	r24, r20
    2868:	8c 93       	st	X, r24
						return 1;
    286a:	21 e0       	ldi	r18, 0x01	; 1
    286c:	28 87       	std	Y+8, r18	; 0x08
    286e:	33 c0       	rjmp	.+102    	; 0x28d6 <DIO_SetPinValue+0x22e>
						break;
				case PORTC:
					CLR_BIT(DIO_PORTC,PIN);
    2870:	a5 e3       	ldi	r26, 0x35	; 53
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	e5 e3       	ldi	r30, 0x35	; 53
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	48 2f       	mov	r20, r24
    287c:	8a 81       	ldd	r24, Y+2	; 0x02
    287e:	28 2f       	mov	r18, r24
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	02 2e       	mov	r0, r18
    2888:	02 c0       	rjmp	.+4      	; 0x288e <DIO_SetPinValue+0x1e6>
    288a:	88 0f       	add	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	0a 94       	dec	r0
    2890:	e2 f7       	brpl	.-8      	; 0x288a <DIO_SetPinValue+0x1e2>
    2892:	80 95       	com	r24
    2894:	84 23       	and	r24, r20
    2896:	8c 93       	st	X, r24
						return 1;
    2898:	31 e0       	ldi	r19, 0x01	; 1
    289a:	38 87       	std	Y+8, r19	; 0x08
    289c:	1c c0       	rjmp	.+56     	; 0x28d6 <DIO_SetPinValue+0x22e>
						break;
				case PORTD:
					CLR_BIT(DIO_PORTD,PIN);
    289e:	a2 e3       	ldi	r26, 0x32	; 50
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	e2 e3       	ldi	r30, 0x32	; 50
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	48 2f       	mov	r20, r24
    28aa:	8a 81       	ldd	r24, Y+2	; 0x02
    28ac:	28 2f       	mov	r18, r24
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	02 2e       	mov	r0, r18
    28b6:	02 c0       	rjmp	.+4      	; 0x28bc <DIO_SetPinValue+0x214>
    28b8:	88 0f       	add	r24, r24
    28ba:	99 1f       	adc	r25, r25
    28bc:	0a 94       	dec	r0
    28be:	e2 f7       	brpl	.-8      	; 0x28b8 <DIO_SetPinValue+0x210>
    28c0:	80 95       	com	r24
    28c2:	84 23       	and	r24, r20
    28c4:	8c 93       	st	X, r24
						return 1;
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	88 87       	std	Y+8, r24	; 0x08
    28ca:	05 c0       	rjmp	.+10     	; 0x28d6 <DIO_SetPinValue+0x22e>
						break;
				default:
						return -2;
    28cc:	9e ef       	ldi	r25, 0xFE	; 254
    28ce:	98 87       	std	Y+8, r25	; 0x08
    28d0:	02 c0       	rjmp	.+4      	; 0x28d6 <DIO_SetPinValue+0x22e>
					}
				}
			else
			{
				return -3;
    28d2:	2d ef       	ldi	r18, 0xFD	; 253
    28d4:	28 87       	std	Y+8, r18	; 0x08
    28d6:	88 85       	ldd	r24, Y+8	; 0x08
			}
		}
}
    28d8:	28 96       	adiw	r28, 0x08	; 8
    28da:	0f b6       	in	r0, 0x3f	; 63
    28dc:	f8 94       	cli
    28de:	de bf       	out	0x3e, r29	; 62
    28e0:	0f be       	out	0x3f, r0	; 63
    28e2:	cd bf       	out	0x3d, r28	; 61
    28e4:	cf 91       	pop	r28
    28e6:	df 91       	pop	r29
    28e8:	08 95       	ret

000028ea <DIO_SetPortValue>:
 * Set port value
 * INPUT : PORT name  , value
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_SetPortValue(uint8_t PORT , uint8_t value)
{
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	00 d0       	rcall	.+0      	; 0x28f0 <DIO_SetPortValue+0x6>
    28f0:	00 d0       	rcall	.+0      	; 0x28f2 <DIO_SetPortValue+0x8>
    28f2:	0f 92       	push	r0
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	89 83       	std	Y+1, r24	; 0x01
    28fa:	6a 83       	std	Y+2, r22	; 0x02
	switch(PORT)
    28fc:	89 81       	ldd	r24, Y+1	; 0x01
    28fe:	28 2f       	mov	r18, r24
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	3d 83       	std	Y+5, r19	; 0x05
    2904:	2c 83       	std	Y+4, r18	; 0x04
    2906:	8c 81       	ldd	r24, Y+4	; 0x04
    2908:	9d 81       	ldd	r25, Y+5	; 0x05
    290a:	82 30       	cpi	r24, 0x02	; 2
    290c:	91 05       	cpc	r25, r1
    290e:	e9 f0       	breq	.+58     	; 0x294a <DIO_SetPortValue+0x60>
    2910:	2c 81       	ldd	r18, Y+4	; 0x04
    2912:	3d 81       	ldd	r19, Y+5	; 0x05
    2914:	23 30       	cpi	r18, 0x03	; 3
    2916:	31 05       	cpc	r19, r1
    2918:	34 f4       	brge	.+12     	; 0x2926 <DIO_SetPortValue+0x3c>
    291a:	8c 81       	ldd	r24, Y+4	; 0x04
    291c:	9d 81       	ldd	r25, Y+5	; 0x05
    291e:	81 30       	cpi	r24, 0x01	; 1
    2920:	91 05       	cpc	r25, r1
    2922:	61 f0       	breq	.+24     	; 0x293c <DIO_SetPortValue+0x52>
    2924:	27 c0       	rjmp	.+78     	; 0x2974 <DIO_SetPortValue+0x8a>
    2926:	2c 81       	ldd	r18, Y+4	; 0x04
    2928:	3d 81       	ldd	r19, Y+5	; 0x05
    292a:	23 30       	cpi	r18, 0x03	; 3
    292c:	31 05       	cpc	r19, r1
    292e:	a1 f0       	breq	.+40     	; 0x2958 <DIO_SetPortValue+0x6e>
    2930:	8c 81       	ldd	r24, Y+4	; 0x04
    2932:	9d 81       	ldd	r25, Y+5	; 0x05
    2934:	84 30       	cpi	r24, 0x04	; 4
    2936:	91 05       	cpc	r25, r1
    2938:	b1 f0       	breq	.+44     	; 0x2966 <DIO_SetPortValue+0x7c>
    293a:	1c c0       	rjmp	.+56     	; 0x2974 <DIO_SetPortValue+0x8a>
		{
		case PORTA:
			DIO_PORTA = value;
    293c:	eb e3       	ldi	r30, 0x3B	; 59
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	8a 81       	ldd	r24, Y+2	; 0x02
    2942:	80 83       	st	Z, r24
				return 1;
    2944:	91 e0       	ldi	r25, 0x01	; 1
    2946:	9b 83       	std	Y+3, r25	; 0x03
    2948:	17 c0       	rjmp	.+46     	; 0x2978 <DIO_SetPortValue+0x8e>
				break;
		case PORTB:
				DIO_PORTB = value;
    294a:	e8 e3       	ldi	r30, 0x38	; 56
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	8a 81       	ldd	r24, Y+2	; 0x02
    2950:	80 83       	st	Z, r24
				return 1;
    2952:	21 e0       	ldi	r18, 0x01	; 1
    2954:	2b 83       	std	Y+3, r18	; 0x03
    2956:	10 c0       	rjmp	.+32     	; 0x2978 <DIO_SetPortValue+0x8e>
				break;
		case PORTC:
				DIO_PORTC = value;
    2958:	e5 e3       	ldi	r30, 0x35	; 53
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	8a 81       	ldd	r24, Y+2	; 0x02
    295e:	80 83       	st	Z, r24
				return 1;
    2960:	31 e0       	ldi	r19, 0x01	; 1
    2962:	3b 83       	std	Y+3, r19	; 0x03
    2964:	09 c0       	rjmp	.+18     	; 0x2978 <DIO_SetPortValue+0x8e>
				break;
		case PORTD:
				DIO_PORTD = value;
    2966:	e2 e3       	ldi	r30, 0x32	; 50
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	8a 81       	ldd	r24, Y+2	; 0x02
    296c:	80 83       	st	Z, r24
				return 1;
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	8b 83       	std	Y+3, r24	; 0x03
    2972:	02 c0       	rjmp	.+4      	; 0x2978 <DIO_SetPortValue+0x8e>
				break;
		default:
				return -1;
    2974:	9f ef       	ldi	r25, 0xFF	; 255
    2976:	9b 83       	std	Y+3, r25	; 0x03
    2978:	8b 81       	ldd	r24, Y+3	; 0x03
		}
}
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	0f 90       	pop	r0
    2980:	0f 90       	pop	r0
    2982:	0f 90       	pop	r0
    2984:	cf 91       	pop	r28
    2986:	df 91       	pop	r29
    2988:	08 95       	ret

0000298a <DIO_GetPinVal>:
 * get Pin value from any port
 * INPUT : PORT name , PIN number , variable to store the data
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_GetPinVal(uint8_t PORT , uint8_t PIN , uint8_t * val)
{
    298a:	df 93       	push	r29
    298c:	cf 93       	push	r28
    298e:	cd b7       	in	r28, 0x3d	; 61
    2990:	de b7       	in	r29, 0x3e	; 62
    2992:	27 97       	sbiw	r28, 0x07	; 7
    2994:	0f b6       	in	r0, 0x3f	; 63
    2996:	f8 94       	cli
    2998:	de bf       	out	0x3e, r29	; 62
    299a:	0f be       	out	0x3f, r0	; 63
    299c:	cd bf       	out	0x3d, r28	; 61
    299e:	89 83       	std	Y+1, r24	; 0x01
    29a0:	6a 83       	std	Y+2, r22	; 0x02
    29a2:	5c 83       	std	Y+4, r21	; 0x04
    29a4:	4b 83       	std	Y+3, r20	; 0x03

	if(PIN >7)
    29a6:	8a 81       	ldd	r24, Y+2	; 0x02
    29a8:	88 30       	cpi	r24, 0x08	; 8
    29aa:	18 f0       	brcs	.+6      	; 0x29b2 <DIO_GetPinVal+0x28>
			{
				return -1;
    29ac:	2f ef       	ldi	r18, 0xFF	; 255
    29ae:	2f 83       	std	Y+7, r18	; 0x07
    29b0:	7b c0       	rjmp	.+246    	; 0x2aa8 <DIO_GetPinVal+0x11e>
			}
			else
			{
					switch(PORT)
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	48 2f       	mov	r20, r24
    29b6:	50 e0       	ldi	r21, 0x00	; 0
    29b8:	5e 83       	std	Y+6, r21	; 0x06
    29ba:	4d 83       	std	Y+5, r20	; 0x05
    29bc:	8d 81       	ldd	r24, Y+5	; 0x05
    29be:	9e 81       	ldd	r25, Y+6	; 0x06
    29c0:	82 30       	cpi	r24, 0x02	; 2
    29c2:	91 05       	cpc	r25, r1
    29c4:	69 f1       	breq	.+90     	; 0x2a20 <DIO_GetPinVal+0x96>
    29c6:	2d 81       	ldd	r18, Y+5	; 0x05
    29c8:	3e 81       	ldd	r19, Y+6	; 0x06
    29ca:	23 30       	cpi	r18, 0x03	; 3
    29cc:	31 05       	cpc	r19, r1
    29ce:	34 f4       	brge	.+12     	; 0x29dc <DIO_GetPinVal+0x52>
    29d0:	4d 81       	ldd	r20, Y+5	; 0x05
    29d2:	5e 81       	ldd	r21, Y+6	; 0x06
    29d4:	41 30       	cpi	r20, 0x01	; 1
    29d6:	51 05       	cpc	r21, r1
    29d8:	69 f0       	breq	.+26     	; 0x29f4 <DIO_GetPinVal+0x6a>
    29da:	64 c0       	rjmp	.+200    	; 0x2aa4 <DIO_GetPinVal+0x11a>
    29dc:	8d 81       	ldd	r24, Y+5	; 0x05
    29de:	9e 81       	ldd	r25, Y+6	; 0x06
    29e0:	83 30       	cpi	r24, 0x03	; 3
    29e2:	91 05       	cpc	r25, r1
    29e4:	99 f1       	breq	.+102    	; 0x2a4c <DIO_GetPinVal+0xc2>
    29e6:	2d 81       	ldd	r18, Y+5	; 0x05
    29e8:	3e 81       	ldd	r19, Y+6	; 0x06
    29ea:	24 30       	cpi	r18, 0x04	; 4
    29ec:	31 05       	cpc	r19, r1
    29ee:	09 f4       	brne	.+2      	; 0x29f2 <DIO_GetPinVal+0x68>
    29f0:	43 c0       	rjmp	.+134    	; 0x2a78 <DIO_GetPinVal+0xee>
    29f2:	58 c0       	rjmp	.+176    	; 0x2aa4 <DIO_GetPinVal+0x11a>
							{
							case PORTA:
								*val =  GET_BIT(DIO_PINA,PIN);
    29f4:	e9 e3       	ldi	r30, 0x39	; 57
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	80 81       	ld	r24, Z
    29fa:	28 2f       	mov	r18, r24
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2a00:	88 2f       	mov	r24, r24
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	a9 01       	movw	r20, r18
    2a06:	02 c0       	rjmp	.+4      	; 0x2a0c <DIO_GetPinVal+0x82>
    2a08:	55 95       	asr	r21
    2a0a:	47 95       	ror	r20
    2a0c:	8a 95       	dec	r24
    2a0e:	e2 f7       	brpl	.-8      	; 0x2a08 <DIO_GetPinVal+0x7e>
    2a10:	ca 01       	movw	r24, r20
    2a12:	81 70       	andi	r24, 0x01	; 1
    2a14:	eb 81       	ldd	r30, Y+3	; 0x03
    2a16:	fc 81       	ldd	r31, Y+4	; 0x04
    2a18:	80 83       	st	Z, r24
								return 1;
    2a1a:	51 e0       	ldi	r21, 0x01	; 1
    2a1c:	5f 83       	std	Y+7, r21	; 0x07
    2a1e:	44 c0       	rjmp	.+136    	; 0x2aa8 <DIO_GetPinVal+0x11e>
								break;
							case PORTB:
								*val =  GET_BIT(DIO_PINB,PIN);
    2a20:	e6 e3       	ldi	r30, 0x36	; 54
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	80 81       	ld	r24, Z
    2a26:	28 2f       	mov	r18, r24
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2c:	88 2f       	mov	r24, r24
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	a9 01       	movw	r20, r18
    2a32:	02 c0       	rjmp	.+4      	; 0x2a38 <DIO_GetPinVal+0xae>
    2a34:	55 95       	asr	r21
    2a36:	47 95       	ror	r20
    2a38:	8a 95       	dec	r24
    2a3a:	e2 f7       	brpl	.-8      	; 0x2a34 <DIO_GetPinVal+0xaa>
    2a3c:	ca 01       	movw	r24, r20
    2a3e:	81 70       	andi	r24, 0x01	; 1
    2a40:	eb 81       	ldd	r30, Y+3	; 0x03
    2a42:	fc 81       	ldd	r31, Y+4	; 0x04
    2a44:	80 83       	st	Z, r24
								return 1;
    2a46:	51 e0       	ldi	r21, 0x01	; 1
    2a48:	5f 83       	std	Y+7, r21	; 0x07
    2a4a:	2e c0       	rjmp	.+92     	; 0x2aa8 <DIO_GetPinVal+0x11e>
								break;
							case PORTC:
								*val =  GET_BIT(DIO_PINC,PIN);
    2a4c:	e3 e3       	ldi	r30, 0x33	; 51
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	80 81       	ld	r24, Z
    2a52:	28 2f       	mov	r18, r24
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	8a 81       	ldd	r24, Y+2	; 0x02
    2a58:	88 2f       	mov	r24, r24
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	a9 01       	movw	r20, r18
    2a5e:	02 c0       	rjmp	.+4      	; 0x2a64 <DIO_GetPinVal+0xda>
    2a60:	55 95       	asr	r21
    2a62:	47 95       	ror	r20
    2a64:	8a 95       	dec	r24
    2a66:	e2 f7       	brpl	.-8      	; 0x2a60 <DIO_GetPinVal+0xd6>
    2a68:	ca 01       	movw	r24, r20
    2a6a:	81 70       	andi	r24, 0x01	; 1
    2a6c:	eb 81       	ldd	r30, Y+3	; 0x03
    2a6e:	fc 81       	ldd	r31, Y+4	; 0x04
    2a70:	80 83       	st	Z, r24
								return 1;
    2a72:	51 e0       	ldi	r21, 0x01	; 1
    2a74:	5f 83       	std	Y+7, r21	; 0x07
    2a76:	18 c0       	rjmp	.+48     	; 0x2aa8 <DIO_GetPinVal+0x11e>
								break;
							case PORTD:
								*val =  GET_BIT(DIO_PIND,PIN);
    2a78:	e0 e3       	ldi	r30, 0x30	; 48
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	80 81       	ld	r24, Z
    2a7e:	28 2f       	mov	r18, r24
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	8a 81       	ldd	r24, Y+2	; 0x02
    2a84:	88 2f       	mov	r24, r24
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	a9 01       	movw	r20, r18
    2a8a:	02 c0       	rjmp	.+4      	; 0x2a90 <DIO_GetPinVal+0x106>
    2a8c:	55 95       	asr	r21
    2a8e:	47 95       	ror	r20
    2a90:	8a 95       	dec	r24
    2a92:	e2 f7       	brpl	.-8      	; 0x2a8c <DIO_GetPinVal+0x102>
    2a94:	ca 01       	movw	r24, r20
    2a96:	81 70       	andi	r24, 0x01	; 1
    2a98:	eb 81       	ldd	r30, Y+3	; 0x03
    2a9a:	fc 81       	ldd	r31, Y+4	; 0x04
    2a9c:	80 83       	st	Z, r24
								return 1;
    2a9e:	51 e0       	ldi	r21, 0x01	; 1
    2aa0:	5f 83       	std	Y+7, r21	; 0x07
    2aa2:	02 c0       	rjmp	.+4      	; 0x2aa8 <DIO_GetPinVal+0x11e>
								break;
							default:
								return -2;
    2aa4:	8e ef       	ldi	r24, 0xFE	; 254
    2aa6:	8f 83       	std	Y+7, r24	; 0x07
    2aa8:	8f 81       	ldd	r24, Y+7	; 0x07
							}
			}
}
    2aaa:	27 96       	adiw	r28, 0x07	; 7
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	f8 94       	cli
    2ab0:	de bf       	out	0x3e, r29	; 62
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	cd bf       	out	0x3d, r28	; 61
    2ab6:	cf 91       	pop	r28
    2ab8:	df 91       	pop	r29
    2aba:	08 95       	ret

00002abc <DIO_GetPortValue>:

/*
NOT TESTED YET
*/
sint8_t DIO_GetPortValue(uint8_t PORT , uint8_t * val)
{
    2abc:	df 93       	push	r29
    2abe:	cf 93       	push	r28
    2ac0:	00 d0       	rcall	.+0      	; 0x2ac2 <DIO_GetPortValue+0x6>
    2ac2:	00 d0       	rcall	.+0      	; 0x2ac4 <DIO_GetPortValue+0x8>
    2ac4:	00 d0       	rcall	.+0      	; 0x2ac6 <DIO_GetPortValue+0xa>
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62
    2aca:	89 83       	std	Y+1, r24	; 0x01
    2acc:	7b 83       	std	Y+3, r23	; 0x03
    2ace:	6a 83       	std	Y+2, r22	; 0x02
	switch(PORT)
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
    2ad2:	28 2f       	mov	r18, r24
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	3e 83       	std	Y+6, r19	; 0x06
    2ad8:	2d 83       	std	Y+5, r18	; 0x05
    2ada:	8d 81       	ldd	r24, Y+5	; 0x05
    2adc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ade:	82 30       	cpi	r24, 0x02	; 2
    2ae0:	91 05       	cpc	r25, r1
    2ae2:	f9 f0       	breq	.+62     	; 0x2b22 <DIO_GetPortValue+0x66>
    2ae4:	2d 81       	ldd	r18, Y+5	; 0x05
    2ae6:	3e 81       	ldd	r19, Y+6	; 0x06
    2ae8:	23 30       	cpi	r18, 0x03	; 3
    2aea:	31 05       	cpc	r19, r1
    2aec:	34 f4       	brge	.+12     	; 0x2afa <DIO_GetPortValue+0x3e>
    2aee:	8d 81       	ldd	r24, Y+5	; 0x05
    2af0:	9e 81       	ldd	r25, Y+6	; 0x06
    2af2:	81 30       	cpi	r24, 0x01	; 1
    2af4:	91 05       	cpc	r25, r1
    2af6:	61 f0       	breq	.+24     	; 0x2b10 <DIO_GetPortValue+0x54>
    2af8:	2f c0       	rjmp	.+94     	; 0x2b58 <DIO_GetPortValue+0x9c>
    2afa:	2d 81       	ldd	r18, Y+5	; 0x05
    2afc:	3e 81       	ldd	r19, Y+6	; 0x06
    2afe:	23 30       	cpi	r18, 0x03	; 3
    2b00:	31 05       	cpc	r19, r1
    2b02:	c1 f0       	breq	.+48     	; 0x2b34 <DIO_GetPortValue+0x78>
    2b04:	8d 81       	ldd	r24, Y+5	; 0x05
    2b06:	9e 81       	ldd	r25, Y+6	; 0x06
    2b08:	84 30       	cpi	r24, 0x04	; 4
    2b0a:	91 05       	cpc	r25, r1
    2b0c:	e1 f0       	breq	.+56     	; 0x2b46 <DIO_GetPortValue+0x8a>
    2b0e:	24 c0       	rjmp	.+72     	; 0x2b58 <DIO_GetPortValue+0x9c>
			{
			case PORTA:
				*val =  DIO_PINA;
    2b10:	e9 e3       	ldi	r30, 0x39	; 57
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	80 81       	ld	r24, Z
    2b16:	ea 81       	ldd	r30, Y+2	; 0x02
    2b18:	fb 81       	ldd	r31, Y+3	; 0x03
    2b1a:	80 83       	st	Z, r24
				return 1;
    2b1c:	91 e0       	ldi	r25, 0x01	; 1
    2b1e:	9c 83       	std	Y+4, r25	; 0x04
    2b20:	1d c0       	rjmp	.+58     	; 0x2b5c <DIO_GetPortValue+0xa0>
				break;
			case PORTB:
				*val =  DIO_PINB;
    2b22:	e6 e3       	ldi	r30, 0x36	; 54
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	80 81       	ld	r24, Z
    2b28:	ea 81       	ldd	r30, Y+2	; 0x02
    2b2a:	fb 81       	ldd	r31, Y+3	; 0x03
    2b2c:	80 83       	st	Z, r24
				return 1;
    2b2e:	21 e0       	ldi	r18, 0x01	; 1
    2b30:	2c 83       	std	Y+4, r18	; 0x04
    2b32:	14 c0       	rjmp	.+40     	; 0x2b5c <DIO_GetPortValue+0xa0>
				break;
			case PORTC:
				*val =  DIO_PINC;
    2b34:	e3 e3       	ldi	r30, 0x33	; 51
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	ea 81       	ldd	r30, Y+2	; 0x02
    2b3c:	fb 81       	ldd	r31, Y+3	; 0x03
    2b3e:	80 83       	st	Z, r24
				return 1;
    2b40:	31 e0       	ldi	r19, 0x01	; 1
    2b42:	3c 83       	std	Y+4, r19	; 0x04
    2b44:	0b c0       	rjmp	.+22     	; 0x2b5c <DIO_GetPortValue+0xa0>
				break;
			case PORTD:
				*val =  DIO_PIND;
    2b46:	e0 e3       	ldi	r30, 0x30	; 48
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	ea 81       	ldd	r30, Y+2	; 0x02
    2b4e:	fb 81       	ldd	r31, Y+3	; 0x03
    2b50:	80 83       	st	Z, r24
				return 1;
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	8c 83       	std	Y+4, r24	; 0x04
    2b56:	02 c0       	rjmp	.+4      	; 0x2b5c <DIO_GetPortValue+0xa0>
				break;
			default:
				return -2;
    2b58:	9e ef       	ldi	r25, 0xFE	; 254
    2b5a:	9c 83       	std	Y+4, r25	; 0x04
    2b5c:	8c 81       	ldd	r24, Y+4	; 0x04
			}

}
    2b5e:	26 96       	adiw	r28, 0x06	; 6
    2b60:	0f b6       	in	r0, 0x3f	; 63
    2b62:	f8 94       	cli
    2b64:	de bf       	out	0x3e, r29	; 62
    2b66:	0f be       	out	0x3f, r0	; 63
    2b68:	cd bf       	out	0x3d, r28	; 61
    2b6a:	cf 91       	pop	r28
    2b6c:	df 91       	pop	r29
    2b6e:	08 95       	ret

00002b70 <DIO_TogglePin>:
 * Toggle Pin value of any port
 * INPUT : PORT name , PIN number
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_TogglePin(uint8_t PORT , uint8_t PIN )
{
    2b70:	df 93       	push	r29
    2b72:	cf 93       	push	r28
    2b74:	00 d0       	rcall	.+0      	; 0x2b76 <DIO_TogglePin+0x6>
    2b76:	00 d0       	rcall	.+0      	; 0x2b78 <DIO_TogglePin+0x8>
    2b78:	0f 92       	push	r0
    2b7a:	cd b7       	in	r28, 0x3d	; 61
    2b7c:	de b7       	in	r29, 0x3e	; 62
    2b7e:	89 83       	std	Y+1, r24	; 0x01
    2b80:	6a 83       	std	Y+2, r22	; 0x02
	if(PIN >7)
    2b82:	8a 81       	ldd	r24, Y+2	; 0x02
    2b84:	88 30       	cpi	r24, 0x08	; 8
    2b86:	18 f0       	brcs	.+6      	; 0x2b8e <DIO_TogglePin+0x1e>
		{
			return -1;
    2b88:	2f ef       	ldi	r18, 0xFF	; 255
    2b8a:	2d 83       	std	Y+5, r18	; 0x05
    2b8c:	7a c0       	rjmp	.+244    	; 0x2c82 <DIO_TogglePin+0x112>
		}
		else
		{
		switch(PORT)
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
    2b90:	28 2f       	mov	r18, r24
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	3c 83       	std	Y+4, r19	; 0x04
    2b96:	2b 83       	std	Y+3, r18	; 0x03
    2b98:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b9c:	82 30       	cpi	r24, 0x02	; 2
    2b9e:	91 05       	cpc	r25, r1
    2ba0:	69 f1       	breq	.+90     	; 0x2bfc <DIO_TogglePin+0x8c>
    2ba2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ba4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ba6:	23 30       	cpi	r18, 0x03	; 3
    2ba8:	31 05       	cpc	r19, r1
    2baa:	34 f4       	brge	.+12     	; 0x2bb8 <DIO_TogglePin+0x48>
    2bac:	8b 81       	ldd	r24, Y+3	; 0x03
    2bae:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb0:	81 30       	cpi	r24, 0x01	; 1
    2bb2:	91 05       	cpc	r25, r1
    2bb4:	69 f0       	breq	.+26     	; 0x2bd0 <DIO_TogglePin+0x60>
    2bb6:	63 c0       	rjmp	.+198    	; 0x2c7e <DIO_TogglePin+0x10e>
    2bb8:	2b 81       	ldd	r18, Y+3	; 0x03
    2bba:	3c 81       	ldd	r19, Y+4	; 0x04
    2bbc:	23 30       	cpi	r18, 0x03	; 3
    2bbe:	31 05       	cpc	r19, r1
    2bc0:	91 f1       	breq	.+100    	; 0x2c26 <DIO_TogglePin+0xb6>
    2bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc6:	84 30       	cpi	r24, 0x04	; 4
    2bc8:	91 05       	cpc	r25, r1
    2bca:	09 f4       	brne	.+2      	; 0x2bce <DIO_TogglePin+0x5e>
    2bcc:	42 c0       	rjmp	.+132    	; 0x2c52 <DIO_TogglePin+0xe2>
    2bce:	57 c0       	rjmp	.+174    	; 0x2c7e <DIO_TogglePin+0x10e>
				{
				case PORTA:
					TOGGLE_BIT(DIO_PORTA,PIN);
    2bd0:	ab e3       	ldi	r26, 0x3B	; 59
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	eb e3       	ldi	r30, 0x3B	; 59
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	48 2f       	mov	r20, r24
    2bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bde:	28 2f       	mov	r18, r24
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	02 2e       	mov	r0, r18
    2be8:	02 c0       	rjmp	.+4      	; 0x2bee <DIO_TogglePin+0x7e>
    2bea:	88 0f       	add	r24, r24
    2bec:	99 1f       	adc	r25, r25
    2bee:	0a 94       	dec	r0
    2bf0:	e2 f7       	brpl	.-8      	; 0x2bea <DIO_TogglePin+0x7a>
    2bf2:	84 27       	eor	r24, r20
    2bf4:	8c 93       	st	X, r24
					return 1;
    2bf6:	91 e0       	ldi	r25, 0x01	; 1
    2bf8:	9d 83       	std	Y+5, r25	; 0x05
    2bfa:	43 c0       	rjmp	.+134    	; 0x2c82 <DIO_TogglePin+0x112>
					break;
				case PORTB:
					TOGGLE_BIT(DIO_PORTB,PIN);
    2bfc:	a8 e3       	ldi	r26, 0x38	; 56
    2bfe:	b0 e0       	ldi	r27, 0x00	; 0
    2c00:	e8 e3       	ldi	r30, 0x38	; 56
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	48 2f       	mov	r20, r24
    2c08:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0a:	28 2f       	mov	r18, r24
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	02 c0       	rjmp	.+4      	; 0x2c18 <DIO_TogglePin+0xa8>
    2c14:	88 0f       	add	r24, r24
    2c16:	99 1f       	adc	r25, r25
    2c18:	2a 95       	dec	r18
    2c1a:	e2 f7       	brpl	.-8      	; 0x2c14 <DIO_TogglePin+0xa4>
    2c1c:	84 27       	eor	r24, r20
    2c1e:	8c 93       	st	X, r24
					return 1;
    2c20:	21 e0       	ldi	r18, 0x01	; 1
    2c22:	2d 83       	std	Y+5, r18	; 0x05
    2c24:	2e c0       	rjmp	.+92     	; 0x2c82 <DIO_TogglePin+0x112>
					break;
				case PORTC:
					TOGGLE_BIT(DIO_PORTC,PIN);
    2c26:	a5 e3       	ldi	r26, 0x35	; 53
    2c28:	b0 e0       	ldi	r27, 0x00	; 0
    2c2a:	e5 e3       	ldi	r30, 0x35	; 53
    2c2c:	f0 e0       	ldi	r31, 0x00	; 0
    2c2e:	80 81       	ld	r24, Z
    2c30:	48 2f       	mov	r20, r24
    2c32:	8a 81       	ldd	r24, Y+2	; 0x02
    2c34:	28 2f       	mov	r18, r24
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	02 2e       	mov	r0, r18
    2c3e:	02 c0       	rjmp	.+4      	; 0x2c44 <DIO_TogglePin+0xd4>
    2c40:	88 0f       	add	r24, r24
    2c42:	99 1f       	adc	r25, r25
    2c44:	0a 94       	dec	r0
    2c46:	e2 f7       	brpl	.-8      	; 0x2c40 <DIO_TogglePin+0xd0>
    2c48:	84 27       	eor	r24, r20
    2c4a:	8c 93       	st	X, r24
					return 1;
    2c4c:	31 e0       	ldi	r19, 0x01	; 1
    2c4e:	3d 83       	std	Y+5, r19	; 0x05
    2c50:	18 c0       	rjmp	.+48     	; 0x2c82 <DIO_TogglePin+0x112>
					break;
				case PORTD:
					TOGGLE_BIT(DIO_PORTD,PIN);
    2c52:	a2 e3       	ldi	r26, 0x32	; 50
    2c54:	b0 e0       	ldi	r27, 0x00	; 0
    2c56:	e2 e3       	ldi	r30, 0x32	; 50
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	80 81       	ld	r24, Z
    2c5c:	48 2f       	mov	r20, r24
    2c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c60:	28 2f       	mov	r18, r24
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	02 2e       	mov	r0, r18
    2c6a:	02 c0       	rjmp	.+4      	; 0x2c70 <DIO_TogglePin+0x100>
    2c6c:	88 0f       	add	r24, r24
    2c6e:	99 1f       	adc	r25, r25
    2c70:	0a 94       	dec	r0
    2c72:	e2 f7       	brpl	.-8      	; 0x2c6c <DIO_TogglePin+0xfc>
    2c74:	84 27       	eor	r24, r20
    2c76:	8c 93       	st	X, r24
					return 1;
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	8d 83       	std	Y+5, r24	; 0x05
    2c7c:	02 c0       	rjmp	.+4      	; 0x2c82 <DIO_TogglePin+0x112>
					break;
				default:
					return -2;
    2c7e:	9e ef       	ldi	r25, 0xFE	; 254
    2c80:	9d 83       	std	Y+5, r25	; 0x05
    2c82:	8d 81       	ldd	r24, Y+5	; 0x05
				}

		}
}
    2c84:	0f 90       	pop	r0
    2c86:	0f 90       	pop	r0
    2c88:	0f 90       	pop	r0
    2c8a:	0f 90       	pop	r0
    2c8c:	0f 90       	pop	r0
    2c8e:	cf 91       	pop	r28
    2c90:	df 91       	pop	r29
    2c92:	08 95       	ret

00002c94 <main>:
#include "03 - HAL/KEYPAD/KEYPAD_Interface.h"
#include  "03 - HAL/LCD/LCD_Interface.h"


void main()
{
    2c94:	df 93       	push	r29
    2c96:	cf 93       	push	r28
    2c98:	0f 92       	push	r0
    2c9a:	cd b7       	in	r28, 0x3d	; 61
    2c9c:	de b7       	in	r29, 0x3e	; 62

	uint8_t b=0;
    2c9e:	19 82       	std	Y+1, r1	; 0x01

	LCD_Init();
    2ca0:	0e 94 47 06 	call	0xc8e	; 0xc8e <LCD_Init>
	KEYPAD_init();
    2ca4:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <KEYPAD_init>

	lcd_string("The number is :");
    2ca8:	80 e6       	ldi	r24, 0x60	; 96
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <lcd_string>
	LCD_GotoXY(1,5);
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	65 e0       	ldi	r22, 0x05	; 5
    2cb4:	0e 94 e7 06 	call	0xdce	; 0xdce <LCD_GotoXY>

	while(1)
	{

		b=KEYPAD_GetNum();
    2cb8:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <KEYPAD_GetNum>
    2cbc:	89 83       	std	Y+1, r24	; 0x01
		if( b==255)
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	8f 3f       	cpi	r24, 0xFF	; 255
    2cc2:	d1 f3       	breq	.-12     	; 0x2cb8 <main+0x24>
		{

		}
		else
		{
			LCD_SendNumber(b);
    2cc4:	89 81       	ldd	r24, Y+1	; 0x01
    2cc6:	88 2f       	mov	r24, r24
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	a0 e0       	ldi	r26, 0x00	; 0
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	bc 01       	movw	r22, r24
    2cd0:	cd 01       	movw	r24, r26
    2cd2:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <LCD_SendNumber>
    2cd6:	f0 cf       	rjmp	.-32     	; 0x2cb8 <main+0x24>

00002cd8 <__divmodhi4>:
    2cd8:	97 fb       	bst	r25, 7
    2cda:	09 2e       	mov	r0, r25
    2cdc:	07 26       	eor	r0, r23
    2cde:	0a d0       	rcall	.+20     	; 0x2cf4 <__divmodhi4_neg1>
    2ce0:	77 fd       	sbrc	r23, 7
    2ce2:	04 d0       	rcall	.+8      	; 0x2cec <__divmodhi4_neg2>
    2ce4:	27 d0       	rcall	.+78     	; 0x2d34 <__udivmodhi4>
    2ce6:	06 d0       	rcall	.+12     	; 0x2cf4 <__divmodhi4_neg1>
    2ce8:	00 20       	and	r0, r0
    2cea:	1a f4       	brpl	.+6      	; 0x2cf2 <__divmodhi4_exit>

00002cec <__divmodhi4_neg2>:
    2cec:	70 95       	com	r23
    2cee:	61 95       	neg	r22
    2cf0:	7f 4f       	sbci	r23, 0xFF	; 255

00002cf2 <__divmodhi4_exit>:
    2cf2:	08 95       	ret

00002cf4 <__divmodhi4_neg1>:
    2cf4:	f6 f7       	brtc	.-4      	; 0x2cf2 <__divmodhi4_exit>
    2cf6:	90 95       	com	r25
    2cf8:	81 95       	neg	r24
    2cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    2cfc:	08 95       	ret

00002cfe <__divmodsi4>:
    2cfe:	97 fb       	bst	r25, 7
    2d00:	09 2e       	mov	r0, r25
    2d02:	05 26       	eor	r0, r21
    2d04:	0e d0       	rcall	.+28     	; 0x2d22 <__divmodsi4_neg1>
    2d06:	57 fd       	sbrc	r21, 7
    2d08:	04 d0       	rcall	.+8      	; 0x2d12 <__divmodsi4_neg2>
    2d0a:	28 d0       	rcall	.+80     	; 0x2d5c <__udivmodsi4>
    2d0c:	0a d0       	rcall	.+20     	; 0x2d22 <__divmodsi4_neg1>
    2d0e:	00 1c       	adc	r0, r0
    2d10:	38 f4       	brcc	.+14     	; 0x2d20 <__divmodsi4_exit>

00002d12 <__divmodsi4_neg2>:
    2d12:	50 95       	com	r21
    2d14:	40 95       	com	r20
    2d16:	30 95       	com	r19
    2d18:	21 95       	neg	r18
    2d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d1c:	4f 4f       	sbci	r20, 0xFF	; 255
    2d1e:	5f 4f       	sbci	r21, 0xFF	; 255

00002d20 <__divmodsi4_exit>:
    2d20:	08 95       	ret

00002d22 <__divmodsi4_neg1>:
    2d22:	f6 f7       	brtc	.-4      	; 0x2d20 <__divmodsi4_exit>
    2d24:	90 95       	com	r25
    2d26:	80 95       	com	r24
    2d28:	70 95       	com	r23
    2d2a:	61 95       	neg	r22
    2d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d2e:	8f 4f       	sbci	r24, 0xFF	; 255
    2d30:	9f 4f       	sbci	r25, 0xFF	; 255
    2d32:	08 95       	ret

00002d34 <__udivmodhi4>:
    2d34:	aa 1b       	sub	r26, r26
    2d36:	bb 1b       	sub	r27, r27
    2d38:	51 e1       	ldi	r21, 0x11	; 17
    2d3a:	07 c0       	rjmp	.+14     	; 0x2d4a <__udivmodhi4_ep>

00002d3c <__udivmodhi4_loop>:
    2d3c:	aa 1f       	adc	r26, r26
    2d3e:	bb 1f       	adc	r27, r27
    2d40:	a6 17       	cp	r26, r22
    2d42:	b7 07       	cpc	r27, r23
    2d44:	10 f0       	brcs	.+4      	; 0x2d4a <__udivmodhi4_ep>
    2d46:	a6 1b       	sub	r26, r22
    2d48:	b7 0b       	sbc	r27, r23

00002d4a <__udivmodhi4_ep>:
    2d4a:	88 1f       	adc	r24, r24
    2d4c:	99 1f       	adc	r25, r25
    2d4e:	5a 95       	dec	r21
    2d50:	a9 f7       	brne	.-22     	; 0x2d3c <__udivmodhi4_loop>
    2d52:	80 95       	com	r24
    2d54:	90 95       	com	r25
    2d56:	bc 01       	movw	r22, r24
    2d58:	cd 01       	movw	r24, r26
    2d5a:	08 95       	ret

00002d5c <__udivmodsi4>:
    2d5c:	a1 e2       	ldi	r26, 0x21	; 33
    2d5e:	1a 2e       	mov	r1, r26
    2d60:	aa 1b       	sub	r26, r26
    2d62:	bb 1b       	sub	r27, r27
    2d64:	fd 01       	movw	r30, r26
    2d66:	0d c0       	rjmp	.+26     	; 0x2d82 <__udivmodsi4_ep>

00002d68 <__udivmodsi4_loop>:
    2d68:	aa 1f       	adc	r26, r26
    2d6a:	bb 1f       	adc	r27, r27
    2d6c:	ee 1f       	adc	r30, r30
    2d6e:	ff 1f       	adc	r31, r31
    2d70:	a2 17       	cp	r26, r18
    2d72:	b3 07       	cpc	r27, r19
    2d74:	e4 07       	cpc	r30, r20
    2d76:	f5 07       	cpc	r31, r21
    2d78:	20 f0       	brcs	.+8      	; 0x2d82 <__udivmodsi4_ep>
    2d7a:	a2 1b       	sub	r26, r18
    2d7c:	b3 0b       	sbc	r27, r19
    2d7e:	e4 0b       	sbc	r30, r20
    2d80:	f5 0b       	sbc	r31, r21

00002d82 <__udivmodsi4_ep>:
    2d82:	66 1f       	adc	r22, r22
    2d84:	77 1f       	adc	r23, r23
    2d86:	88 1f       	adc	r24, r24
    2d88:	99 1f       	adc	r25, r25
    2d8a:	1a 94       	dec	r1
    2d8c:	69 f7       	brne	.-38     	; 0x2d68 <__udivmodsi4_loop>
    2d8e:	60 95       	com	r22
    2d90:	70 95       	com	r23
    2d92:	80 95       	com	r24
    2d94:	90 95       	com	r25
    2d96:	9b 01       	movw	r18, r22
    2d98:	ac 01       	movw	r20, r24
    2d9a:	bd 01       	movw	r22, r26
    2d9c:	cf 01       	movw	r24, r30
    2d9e:	08 95       	ret

00002da0 <__prologue_saves__>:
    2da0:	2f 92       	push	r2
    2da2:	3f 92       	push	r3
    2da4:	4f 92       	push	r4
    2da6:	5f 92       	push	r5
    2da8:	6f 92       	push	r6
    2daa:	7f 92       	push	r7
    2dac:	8f 92       	push	r8
    2dae:	9f 92       	push	r9
    2db0:	af 92       	push	r10
    2db2:	bf 92       	push	r11
    2db4:	cf 92       	push	r12
    2db6:	df 92       	push	r13
    2db8:	ef 92       	push	r14
    2dba:	ff 92       	push	r15
    2dbc:	0f 93       	push	r16
    2dbe:	1f 93       	push	r17
    2dc0:	cf 93       	push	r28
    2dc2:	df 93       	push	r29
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
    2dc8:	ca 1b       	sub	r28, r26
    2dca:	db 0b       	sbc	r29, r27
    2dcc:	0f b6       	in	r0, 0x3f	; 63
    2dce:	f8 94       	cli
    2dd0:	de bf       	out	0x3e, r29	; 62
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	cd bf       	out	0x3d, r28	; 61
    2dd6:	09 94       	ijmp

00002dd8 <__epilogue_restores__>:
    2dd8:	2a 88       	ldd	r2, Y+18	; 0x12
    2dda:	39 88       	ldd	r3, Y+17	; 0x11
    2ddc:	48 88       	ldd	r4, Y+16	; 0x10
    2dde:	5f 84       	ldd	r5, Y+15	; 0x0f
    2de0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2de2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2de4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2de6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2de8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dea:	b9 84       	ldd	r11, Y+9	; 0x09
    2dec:	c8 84       	ldd	r12, Y+8	; 0x08
    2dee:	df 80       	ldd	r13, Y+7	; 0x07
    2df0:	ee 80       	ldd	r14, Y+6	; 0x06
    2df2:	fd 80       	ldd	r15, Y+5	; 0x05
    2df4:	0c 81       	ldd	r16, Y+4	; 0x04
    2df6:	1b 81       	ldd	r17, Y+3	; 0x03
    2df8:	aa 81       	ldd	r26, Y+2	; 0x02
    2dfa:	b9 81       	ldd	r27, Y+1	; 0x01
    2dfc:	ce 0f       	add	r28, r30
    2dfe:	d1 1d       	adc	r29, r1
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	f8 94       	cli
    2e04:	de bf       	out	0x3e, r29	; 62
    2e06:	0f be       	out	0x3f, r0	; 63
    2e08:	cd bf       	out	0x3d, r28	; 61
    2e0a:	ed 01       	movw	r28, r26
    2e0c:	08 95       	ret

00002e0e <_exit>:
    2e0e:	f8 94       	cli

00002e10 <__stop_program>:
    2e10:	ff cf       	rjmp	.-2      	; 0x2e10 <__stop_program>
